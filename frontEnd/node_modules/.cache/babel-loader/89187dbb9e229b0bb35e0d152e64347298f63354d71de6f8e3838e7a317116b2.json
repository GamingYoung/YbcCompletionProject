{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport radarAxisJson from '../../../../pyCharm/ybcProject/data/radar_axis.json';\nimport radarJson from '../../../../pyCharm/ybcProject/data/radar_detail.json';\nimport bordJson from '../../../../pyCharm/ybcProject/data/bord.json';\nimport * as d3 from 'd3';\nexport default {\n  name: 'view_2',\n  data() {\n    return {\n      chartData: {\n        fieldNames: [['流动比率', '速动比率', '现金比率', '资产负债率', '所有者权益比率', '产权比率'], ['流动资产周转率', '流动资产利润率', '固定资产周转率', '固定资产利润率', '总资产周转率', '总资产利润率'], ['营业毛利率', '净利润率', '营业利润率', '成本费用利润率', '总资产报酬率', '总负债报酬率']],\n        values: [[[10, 20, 30, 40, 50, 60], [10, 20, 30, 40, 100, 100]], [[10, 20, 30, 40, 50, 60], [10, 20, 30, 40, 100, 100]], [[10, 20, 30, 40, 50, 60], [10, 20, 30, 40, 100, 100]]],\n        values_coop_num: [[[1, 1, 0, 1, 0], [1, 2, 3, 4, 5], [30, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 30, 4, 5], [1, 2, 3, 4, 5]], [[1, 1, 0, 1, 0], [1, 2, 3, 4, 5], [30, 30, 30, 30, 30], [1, 2, 3, 4, 5], [1, 2, 30, 4, 5], [1, 2, 3, 4, 5]], [[1, 1, 0, 1, 0], [1, 2, 3, 4, 5], [30, 30, 30, 30, 30], [1, 2, 3, 4, 5], [1, 2, 30, 4, 5], [30, 30, 30, 30, 30]]],\n        values_num: [[0.75, 0.2], [1.2, 3.4], [1.3, 2.4], [3.5, 1.5], [4, 3.4], [1.3, 1.4]] // 轴上公司位置数组？？？\n      },\n\n      chartConfig: {\n        // 调整雷达图的大小\n        radius: 105,\n        // 雷达图外扇形半径\n        sector_radius: 120,\n        // 雷达图外扇形高度\n        sector_height: 25,\n        // 指标的数量，和fieldNames的长度相同\n        total: 6,\n        // 网轴的级数，网轴上从小到大有多少个正方形\n        level: 5,\n        rangeMin: 0,\n        rangeMax: 100,\n        arc: 2 * Math.PI\n      }\n    };\n  },\n  props: {\n    corCop: Number\n  },\n  methods: {\n    // 计算轴颜色和扇形颜色盘\n    // 公司和对比公司的颜色盘\n    getColorCoop(idx) {\n      const palette = ['#0081C9', '#54B435'];\n      return palette[idx % palette.length];\n    },\n    getColor(idx, proportion) {\n      const palette = [\n      // 从上到下：绿黄蓝紫灰红\n      ['#2ca25f', '#99d8c9'], ['#fdae6b', '#ffeda0'], ['#3182bd', '#9ecae1'], ['#756bb1', '#bcbddc'], ['#636363', '#bdbdbd'], ['#f03b20', '#feb24c']];\n      const i = d3.interpolateLab(palette[idx][0], palette[idx][1]);\n      return i(proportion);\n    },\n    createRadarChart(width, height, idx) {\n      // 给data里的值赋值\n      // this.chartData.values_main[0][0] = 100\n      const that = this;\n      const main = d3.select('#view3 svg').append('g').classed('main', true)\n      // 可以这么写数据，圆中心位置\n      .attr('transform', 'translate(' + width + ',' + height + ')');\n      const onePiece = this.chartConfig.arc / this.chartConfig.total;\n      // 每个点坐标\n      const polygons = {\n        webs: [],\n        webPoints: [],\n        // 同心圆半径\n        radius_circle: []\n      };\n      // 计算每一层坐标\n      for (let k = this.chartConfig.level; k > 0; k--) {\n        let webs = '';\n        const webPoints = [];\n        const r = this.chartConfig.radius / this.chartConfig.level * k;\n        polygons.radius_circle.push(r);\n        // 计算一层中每个点的坐标\n        for (let i = 0; i < this.chartConfig.total; i++) {\n          const x = r * Math.sin(i * onePiece);\n          const y = r * Math.cos(i * onePiece);\n          const temp = this.findMax(this.chartData.values_coop_num[idx][i]);\n          webs += x + ',' + y + ' ';\n          webPoints.push({\n            x: x,\n            y: y,\n            proportion: this.chartData.values_coop_num[idx][i][k] / temp\n          });\n        }\n        polygons.webs.push(webs);\n        polygons.webPoints.push(webPoints);\n      }\n      // 画圆外侧扇形区域\n      const sectorsData = this.calcSectorData(idx);\n      console.log(sectorsData);\n      const sectors = main.append('g').classed('sectors', true);\n      sectors.selectAll('g').data(sectorsData).enter().append('g').attr('class', function (d, i) {\n        return 'sector' + (i + 1);\n      });\n      for (let i = 0; i < sectorsData.length; i++) {\n        // 遍历每个雷达图区域\n        const sector = sectors.select('.sector' + (i + 1));\n        const sectorData = sectorsData[i];\n        sector.append('polygon').attr('points', sectorData.polygon).attr('fill', function (d, index) {\n          return that.getColor(i, 0.5);\n        });\n        // .attr('fill', 'none')\n        // const circles = sector.append('g')\n        //   .classed('circles', true)\n        // circles.selectAll('circles')\n        //   .data(sectorData.points)\n        //   .enter()\n        //   .append('circle')\n        //   .attr('cx', function (d) {\n        //     return d.x\n        //   })\n        //   .attr('cy', function (d) {\n        //     return d.y\n        //   })\n        //   .attr('r', 1.5)\n        //   .attr('stroke', function (d, index) {\n        //     return that.getColor(i, 0.5)\n        //   })\n      }\n      // 给两条直线中上色可转换成一条线上色，将第二条线内换成别的颜色就可以\n      // 将扇形的多余部分用空白圆覆盖\n      const shadow = main.append('circle');\n      shadow.attr('cx', 0).attr('cy', 0).attr('r', this.chartConfig.sector_radius).attr('fill', 'white');\n      // 同心圆\n      const webs = main.append('g').classed('webs', true);\n      webs.selectAll('circle').data(polygons.radius_circle).enter().append('circle').attr('cx', '0').attr('cy', '0').attr('r', function (d) {\n        return d;\n      });\n      // 画轴\n      const axissData = this.calcAxisData(polygons, idx);\n      const lines = main.append('g').classed('lines', true);\n      lines.selectAll('g').data(axissData).enter().append('g').attr('class', function (d, i) {\n        return 'line' + (i + 1);\n      });\n      for (let i = 0; i < this.chartConfig.total * this.chartConfig.level; i++) {\n        const temp = i % 6;\n        const line = lines.select('.line' + (i + 1));\n        line.append('line').attr('x1', 0).attr('y1', 0).attr('x2', axissData[i].x).attr('y2', axissData[i].y).attr('stroke-width', 12).attr('stroke', function (d, index) {\n          return that.getColor(temp, axissData[i].proportion);\n        });\n      }\n      // 标注公司位置\n      const copData = this.calcCopData(polygons, idx);\n      const pointsLines = main.append('g').classed('pointsLines', true);\n      pointsLines.selectAll('g').data(copData).enter().append('g').attr('class', function (d, i) {\n        return 'pointsLine' + (i + 1);\n      });\n      for (let i = 0; i < copData.length; i++) {\n        const pointsLine = pointsLines.select('.pointsLine' + (i + 1));\n        const pointLine = pointsLine.append('g').classed('pointLine', true);\n        pointLine.selectAll('circles').data(copData[i]).enter().append('circle').attr('cx', function (d) {\n          return d.x;\n        }).attr('cy', function (d) {\n          return d.y;\n        }).attr('r', 2).attr('stroke', 'white').attr('fill', 'white');\n      }\n      // 计算点的位置\n      const areasData = this.calcAreaData(idx);\n      // 添加g分组包含所有雷达图区域\n      const areas = main.append('g').classed('areas', true);\n      // 添加g分组包含雷达图区域下的多边形和圆点\n      areas.selectAll('g').data(areasData).enter().append('g').attr('class', function (d, i) {\n        return 'area' + (i + 1);\n      });\n      for (let i = 0; i < areasData.length; i++) {\n        // 遍历每个雷达图区域\n        const area = areas.select('.area' + (i + 1));\n        const areaData = areasData[i];\n        area.append('polygon').attr('points', areaData.polygon).attr('stroke', function (d, index) {\n          return that.getColorCoop(i);\n        }).attr('fill', 'none');\n        // 绘制雷达图定点\n        const circles = area.append('g').classed('circles', true);\n        circles.selectAll('circles').data(areaData.points).enter().append('circle').attr('cx', function (d) {\n          return d.x;\n        }).attr('cy', function (d) {\n          return d.y;\n        }).attr('r', 3).attr('stroke', function (d, index) {\n          return that.getColorCoop(i);\n        });\n      }\n      // 计算文字坐标\n      const textPoints = [];\n      // 文字坐标位置\n      const textRadius = this.chartConfig.radius + 30;\n      for (let i = 0; i < this.chartConfig.total; i++) {\n        const x = textRadius * Math.sin(i * onePiece);\n        const y = textRadius * Math.cos(i * onePiece);\n        textPoints.push({\n          x: x,\n          y: y\n        });\n      }\n      // 添加到画布\n      const texts = main.append('g').classed('texts', true);\n      texts.selectAll('text').data(textPoints).enter().append('text').attr('x', function (d) {\n        return d.x;\n      }).attr('y', function (d) {\n        return d.y;\n      }).text(function (d, i) {\n        return that.chartData.fieldNames[idx][i];\n      });\n    },\n    // 计算面积图上目标公司，对比公司以及均值的点\n    calcPointData(sectorsData, idx) {\n      const keys = Object.keys(bordJson);\n      console.log(bordJson[keys[0]][0][1]);\n      const pointsData = [];\n      return pointsData;\n    },\n    // 计算轴上公司位置\n    calcCopData(polygons, idx) {\n      const keys = Object.keys(radarAxisJson);\n      const copDatas = [];\n      for (let i = 0; i < 6; i++) {\n        const copData = [];\n        const min = radarAxisJson[keys[idx * 6 + i]][0];\n        const max = radarAxisJson[keys[idx * 6 + i]][radarAxisJson[keys[idx * 6 + i]].length - 1];\n        for (let j = 0; j < radarAxisJson[keys[idx * 6 + i]].length; j++) {\n          copData.push({\n            x: polygons.webPoints[0][i].x * (radarAxisJson[keys[idx * 6 + i]][j] - min) / (max - min),\n            y: polygons.webPoints[0][i].y * (radarAxisJson[keys[idx * 6 + i]][j] - min) / (max - min)\n          });\n        }\n        copDatas.push(copData);\n      }\n      return copDatas;\n    },\n    calcAxisData(polygons, idx) {\n      const axisData = [];\n      for (let i = 0; i < polygons.webPoints.length; i++) {\n        for (let j = 0; j < polygons.webPoints[i].length; j++) {\n          axisData.push({\n            x: polygons.webPoints[i][j].x,\n            y: polygons.webPoints[i][j].y,\n            proportion: this.chartData.values_coop_num[idx][j][i]\n          });\n        }\n      }\n      return axisData;\n    },\n    calcAreaData(idx) {\n      const keys = Object.keys(radarJson);\n      for (let i = 0; i < 6; i++) {\n        this.chartData.values[idx][0][i] = radarJson[keys[0]][idx * 6 + i];\n        this.chartData.values[idx][1][i] = radarJson[keys[this.corCop]][idx * 6 + i];\n      }\n      const areasData = [];\n      const onePiece = this.chartConfig.arc / this.chartConfig.total;\n      const values = this.chartData.values[idx];\n      this.chartConfig.rangeMax = this.find1Max(values[0], values[1]);\n      this.chartConfig.rangeMin = this.find1Min(values[0], values[1]);\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        let area = '';\n        const points = [];\n        for (let k = 0; k < this.chartConfig.total; k++) {\n          const r = this.chartConfig.radius * (value[k] - this.chartConfig.rangeMin) / (this.chartConfig.rangeMax - this.chartConfig.rangeMin);\n          const x = r * Math.sin(k * onePiece);\n          const y = r * Math.cos(k * onePiece);\n          area += x + ',' + y + ' ';\n          points.push({\n            x: x,\n            y: y\n          });\n        }\n        areasData.push({\n          // 用于画连线的定义\n          polygon: area,\n          // 用于计算单个点的定义\n          points: points\n        });\n      }\n      return areasData;\n    },\n    calcSectorData(idx) {\n      const keys = Object.keys(bordJson);\n      for (let i = 0; i < 6; i++) {\n        for (let j = 0; j < 5; j++) {\n          this.chartData.values_coop_num[idx][i][j] = bordJson[keys[idx * 6 + i]][1][j];\n        }\n      }\n      const sectorData = [];\n      const onePiece = this.chartConfig.arc / 30;\n      const values = this.chartData.values_coop_num[idx];\n      // 分6次画扇形\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        let sector = '';\n        const points = [];\n        // 每个扇形中有5个点\n        const temp = this.findMax(value);\n        for (let j = 0; j < value.length; j++) {\n          const r = this.chartConfig.sector_radius + value[j] / temp * this.chartConfig.sector_height;\n          const x = r * Math.sin((i * 5 + j) * onePiece);\n          const y = r * Math.cos((i * 5 + j) * onePiece);\n          sector += x + ',' + y + ' ';\n          points.push({\n            x: x,\n            y: y\n          });\n          if (j === value.length - 1) {\n            sector += 0 + ',' + 0 + ' ';\n          }\n        }\n        sectorData.push({\n          polygon: sector,\n          points: points\n        });\n      }\n      return sectorData;\n    },\n    findMax(array) {\n      let temp = 0;\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] > temp) {\n          temp = array[i];\n        }\n      }\n      return temp;\n    },\n    find1Max(array1, array2) {\n      let temp = array1[0];\n      for (let i = 0; i < array1.length; i++) {\n        if (array1[i] > temp) {\n          temp = array1[i];\n        }\n      }\n      for (let i = 0; i < array2.length; i++) {\n        if (array2[i] > temp) {\n          temp = array2[i];\n        }\n      }\n      return temp;\n    },\n    find1Min(array1, array2) {\n      let temp = array1[0];\n      for (let i = 0; i < array1.length; i++) {\n        if (array1[i] < temp) {\n          temp = array1[i];\n        }\n      }\n      for (let i = 0; i < array2.length; i++) {\n        if (array2[i] < temp) {\n          temp = array2[i];\n        }\n      }\n      return temp;\n    }\n  },\n  mounted() {\n    this.createRadarChart(180, 150, 0);\n    this.createRadarChart(180, 450, 1);\n    this.createRadarChart(180, 750, 2);\n  }\n};","map":{"version":3,"names":["radarAxisJson","radarJson","bordJson","d3","name","data","chartData","fieldNames","values","values_coop_num","values_num","chartConfig","radius","sector_radius","sector_height","total","level","rangeMin","rangeMax","arc","Math","PI","props","corCop","Number","methods","getColorCoop","idx","palette","length","getColor","proportion","i","interpolateLab","createRadarChart","width","height","that","main","select","append","classed","attr","onePiece","polygons","webs","webPoints","radius_circle","k","r","push","x","sin","y","cos","temp","findMax","sectorsData","calcSectorData","console","log","sectors","selectAll","enter","d","sector","sectorData","polygon","index","shadow","axissData","calcAxisData","lines","line","copData","calcCopData","pointsLines","pointsLine","pointLine","areasData","calcAreaData","areas","area","areaData","circles","points","textPoints","textRadius","texts","text","calcPointData","keys","Object","pointsData","copDatas","min","max","j","axisData","find1Max","find1Min","value","array","array1","array2","mounted"],"sources":["/Users/younggaming/Documents/webstorm/ybcprogram/src/components/view2.vue"],"sourcesContent":["<template>\n  <div class=\"container\" id=\"view3\">\n    <svg width=\"100%\" height=\"100%\"></svg>\n  </div>\n\n</template>\n\n<script>\nimport radarAxisJson from '../../../../pyCharm/ybcProject/data/radar_axis.json'\nimport radarJson from '../../../../pyCharm/ybcProject/data/radar_detail.json'\nimport bordJson from '../../../../pyCharm/ybcProject/data/bord.json'\nimport * as d3 from 'd3'\nexport default {\n  name: 'view_2',\n  data () {\n    return {\n      chartData: {\n        fieldNames: [\n          ['流动比率', '速动比率', '现金比率', '资产负债率', '所有者权益比率', '产权比率'],\n          ['流动资产周转率', '流动资产利润率', '固定资产周转率', '固定资产利润率', '总资产周转率', '总资产利润率'],\n          ['营业毛利率', '净利润率', '营业利润率', '成本费用利润率', '总资产报酬率', '总负债报酬率']\n        ],\n        values: [\n          [[10, 20, 30, 40, 50, 60], [10, 20, 30, 40, 100, 100]],\n          [[10, 20, 30, 40, 50, 60], [10, 20, 30, 40, 100, 100]],\n          [[10, 20, 30, 40, 50, 60], [10, 20, 30, 40, 100, 100]]\n        ],\n        values_coop_num: [\n          [[1, 1, 0, 1, 0], [1, 2, 3, 4, 5], [30, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 30, 4, 5], [1, 2, 3, 4, 5]],\n          [[1, 1, 0, 1, 0], [1, 2, 3, 4, 5], [30, 30, 30, 30, 30], [1, 2, 3, 4, 5], [1, 2, 30, 4, 5], [1, 2, 3, 4, 5]],\n          [[1, 1, 0, 1, 0], [1, 2, 3, 4, 5], [30, 30, 30, 30, 30], [1, 2, 3, 4, 5], [1, 2, 30, 4, 5], [30, 30, 30, 30, 30]]\n        ],\n        values_num: [\n          [0.75, 0.2],\n          [1.2, 3.4],\n          [1.3, 2.4],\n          [3.5, 1.5],\n          [4, 3.4],\n          [1.3, 1.4]\n        ] // 轴上公司位置数组？？？\n      },\n      chartConfig: {\n        // 调整雷达图的大小\n        radius: 105,\n        // 雷达图外扇形半径\n        sector_radius: 120,\n        // 雷达图外扇形高度\n        sector_height: 25,\n        // 指标的数量，和fieldNames的长度相同\n        total: 6,\n        // 网轴的级数，网轴上从小到大有多少个正方形\n        level: 5,\n        rangeMin: 0,\n        rangeMax: 100,\n        arc: 2 * Math.PI\n      }\n    }\n  },\n  props: {\n    corCop: Number\n  },\n  methods: {\n    // 计算轴颜色和扇形颜色盘\n    // 公司和对比公司的颜色盘\n    getColorCoop (idx) {\n      const palette = ['#0081C9', '#54B435']\n      return palette[idx % palette.length]\n    },\n    getColor (idx, proportion) {\n      const palette = [ // 从上到下：绿黄蓝紫灰红\n        ['#2ca25f', '#99d8c9'],\n        ['#fdae6b', '#ffeda0'],\n        ['#3182bd', '#9ecae1'],\n        ['#756bb1', '#bcbddc'],\n        ['#636363', '#bdbdbd'],\n        ['#f03b20', '#feb24c']\n      ]\n      const i = d3.interpolateLab(palette[idx][0], palette[idx][1])\n      return i(proportion)\n    },\n    createRadarChart (width, height, idx) {\n      // 给data里的值赋值\n      // this.chartData.values_main[0][0] = 100\n      const that = this\n      const main = d3.select('#view3 svg')\n        .append('g')\n        .classed('main', true)\n        // 可以这么写数据，圆中心位置\n        .attr('transform', 'translate(' + width + ',' + height + ')')\n      const onePiece = this.chartConfig.arc / this.chartConfig.total\n      // 每个点坐标\n      const polygons = {\n        webs: [],\n        webPoints: [],\n        // 同心圆半径\n        radius_circle: []\n      }\n      // 计算每一层坐标\n      for (let k = this.chartConfig.level; k > 0; k--) {\n        let webs = ''\n        const webPoints = []\n        const r = this.chartConfig.radius / this.chartConfig.level * k\n        polygons.radius_circle.push(r)\n        // 计算一层中每个点的坐标\n        for (let i = 0; i < this.chartConfig.total; i++) {\n          const x = r * Math.sin(i * onePiece)\n          const y = r * Math.cos(i * onePiece)\n          const temp = this.findMax(this.chartData.values_coop_num[idx][i])\n          webs += x + ',' + y + ' '\n          webPoints.push({\n            x: x,\n            y: y,\n            proportion: this.chartData.values_coop_num[idx][i][k] / temp\n          })\n        }\n        polygons.webs.push(webs)\n        polygons.webPoints.push(webPoints)\n      }\n      // 画圆外侧扇形区域\n      const sectorsData = this.calcSectorData(idx)\n      console.log(sectorsData)\n      const sectors = main.append('g')\n        .classed('sectors', true)\n      sectors.selectAll('g')\n        .data(sectorsData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'sector' + (i + 1)\n        })\n      for (let i = 0; i < sectorsData.length; i++) {\n        // 遍历每个雷达图区域\n        const sector = sectors.select('.sector' + (i + 1))\n        const sectorData = sectorsData[i]\n        sector.append('polygon')\n          .attr('points', sectorData.polygon)\n          .attr('fill', function (d, index) {\n            return that.getColor(i, 0.5)\n          })\n        // .attr('fill', 'none')\n        // const circles = sector.append('g')\n        //   .classed('circles', true)\n        // circles.selectAll('circles')\n        //   .data(sectorData.points)\n        //   .enter()\n        //   .append('circle')\n        //   .attr('cx', function (d) {\n        //     return d.x\n        //   })\n        //   .attr('cy', function (d) {\n        //     return d.y\n        //   })\n        //   .attr('r', 1.5)\n        //   .attr('stroke', function (d, index) {\n        //     return that.getColor(i, 0.5)\n        //   })\n      }\n      // 给两条直线中上色可转换成一条线上色，将第二条线内换成别的颜色就可以\n      // 将扇形的多余部分用空白圆覆盖\n      const shadow = main.append('circle')\n      shadow.attr('cx', 0)\n        .attr('cy', 0)\n        .attr('r', this.chartConfig.sector_radius)\n        .attr('fill', 'white')\n      // 同心圆\n      const webs = main.append('g')\n        .classed('webs', true)\n      webs.selectAll('circle')\n        .data(polygons.radius_circle)\n        .enter()\n        .append('circle')\n        .attr('cx', '0')\n        .attr('cy', '0')\n        .attr('r', function (d) {\n          return d\n        })\n      // 画轴\n      const axissData = this.calcAxisData(polygons, idx)\n      const lines = main.append('g')\n        .classed('lines', true)\n      lines.selectAll('g')\n        .data(axissData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'line' + (i + 1)\n        })\n      for (let i = 0; i < this.chartConfig.total * this.chartConfig.level; i++) {\n        const temp = i % 6\n        const line = lines.select('.line' + (i + 1))\n        line.append('line')\n          .attr('x1', 0)\n          .attr('y1', 0)\n          .attr('x2', axissData[i].x)\n          .attr('y2', axissData[i].y)\n          .attr('stroke-width', 12)\n          .attr('stroke', function (d, index) {\n            return that.getColor(temp, axissData[i].proportion)\n          })\n      }\n      // 标注公司位置\n      const copData = this.calcCopData(polygons, idx)\n      const pointsLines = main.append('g')\n        .classed('pointsLines', true)\n      pointsLines.selectAll('g')\n        .data(copData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'pointsLine' + (i + 1)\n        })\n      for (let i = 0; i < copData.length; i++) {\n        const pointsLine = pointsLines.select('.pointsLine' + (i + 1))\n        const pointLine = pointsLine.append('g')\n          .classed('pointLine', true)\n        pointLine.selectAll('circles')\n          .data(copData[i])\n          .enter()\n          .append('circle')\n          .attr('cx', function (d) {\n            return d.x\n          })\n          .attr('cy', function (d) {\n            return d.y\n          })\n          .attr('r', 2)\n          .attr('stroke', 'white')\n          .attr('fill', 'white')\n      }\n      // 计算点的位置\n      const areasData = this.calcAreaData(idx)\n      // 添加g分组包含所有雷达图区域\n      const areas = main.append('g')\n        .classed('areas', true)\n      // 添加g分组包含雷达图区域下的多边形和圆点\n      areas.selectAll('g')\n        .data(areasData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'area' + (i + 1)\n        })\n      for (let i = 0; i < areasData.length; i++) {\n        // 遍历每个雷达图区域\n        const area = areas.select('.area' + (i + 1))\n        const areaData = areasData[i]\n        area.append('polygon')\n          .attr('points', areaData.polygon)\n          .attr('stroke', function (d, index) {\n            return that.getColorCoop(i)\n          })\n          .attr('fill', 'none')\n        // 绘制雷达图定点\n        const circles = area.append('g')\n          .classed('circles', true)\n        circles.selectAll('circles')\n          .data(areaData.points)\n          .enter()\n          .append('circle')\n          .attr('cx', function (d) {\n            return d.x\n          })\n          .attr('cy', function (d) {\n            return d.y\n          })\n          .attr('r', 3)\n          .attr('stroke', function (d, index) {\n            return that.getColorCoop(i)\n          })\n      }\n      // 计算文字坐标\n      const textPoints = []\n      // 文字坐标位置\n      const textRadius = this.chartConfig.radius + 30\n      for (let i = 0; i < this.chartConfig.total; i++) {\n        const x = textRadius * Math.sin(i * onePiece)\n        const y = textRadius * Math.cos(i * onePiece)\n        textPoints.push({\n          x: x,\n          y: y\n        })\n      }\n      // 添加到画布\n      const texts = main.append('g')\n        .classed('texts', true)\n      texts.selectAll('text')\n        .data(textPoints)\n        .enter()\n        .append('text')\n        .attr('x', function (d) {\n          return d.x\n        })\n        .attr('y', function (d) {\n          return d.y\n        })\n        .text(function (d, i) {\n          return that.chartData.fieldNames[idx][i]\n        })\n    },\n    // 计算面积图上目标公司，对比公司以及均值的点\n    calcPointData (sectorsData, idx) {\n      const keys = Object.keys(bordJson)\n      console.log(bordJson[keys[0]][0][1])\n      \n      const pointsData = []\n      return pointsData\n    },\n    // 计算轴上公司位置\n    calcCopData (polygons, idx) {\n      const keys = Object.keys(radarAxisJson)\n      const copDatas = []\n      for (let i = 0; i < 6; i++) {\n        const copData = []\n        const min = radarAxisJson[keys[idx * 6 + i]][0]\n        const max = radarAxisJson[keys[idx * 6 + i]][radarAxisJson[keys[idx * 6 + i]].length - 1]\n        for (let j = 0; j < radarAxisJson[keys[idx * 6 + i]].length; j++) {\n          copData.push({\n            x: polygons.webPoints[0][i].x * (radarAxisJson[keys[idx * 6 + i]][j] - min) / (max - min),\n            y: polygons.webPoints[0][i].y * (radarAxisJson[keys[idx * 6 + i]][j] - min) / (max - min)\n          })\n        }\n        copDatas.push(copData)\n      }\n      return copDatas\n    },\n    calcAxisData (polygons, idx) {\n      const axisData = []\n      for (let i = 0; i < polygons.webPoints.length; i++) {\n        for (let j = 0; j < polygons.webPoints[i].length; j++) {\n          axisData.push({\n            x: polygons.webPoints[i][j].x,\n            y: polygons.webPoints[i][j].y,\n            proportion: this.chartData.values_coop_num[idx][j][i]\n          })\n        }\n      }\n      return axisData\n    },\n    calcAreaData (idx) {\n      const keys = Object.keys(radarJson)\n      for (let i = 0; i < 6; i++) {\n        this.chartData.values[idx][0][i] = radarJson[keys[0]][idx * 6 + i]\n        this.chartData.values[idx][1][i] = radarJson[keys[this.corCop]][idx * 6 + i]\n      }\n      const areasData = []\n      const onePiece = this.chartConfig.arc / this.chartConfig.total\n      const values = this.chartData.values[idx]\n      this.chartConfig.rangeMax = this.find1Max(values[0], values[1])\n      this.chartConfig.rangeMin = this.find1Min(values[0], values[1])\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        let area = ''\n        const points = []\n        for (let k = 0; k < this.chartConfig.total; k++) {\n          const r = this.chartConfig.radius * (value[k] - this.chartConfig.rangeMin) / (this.chartConfig.rangeMax - this.chartConfig.rangeMin)\n          const x = r * Math.sin(k * onePiece)\n          const y = r * Math.cos(k * onePiece)\n          area += x + ',' + y + ' '\n          points.push({\n            x: x,\n            y: y\n          })\n        }\n        areasData.push({\n          // 用于画连线的定义\n          polygon: area,\n          // 用于计算单个点的定义\n          points: points\n        })\n      }\n      return areasData\n    },\n    calcSectorData (idx) {\n      const keys = Object.keys(bordJson)\n      for (let i = 0; i < 6; i++) {\n        for (let j = 0; j < 5; j++) {\n          this.chartData.values_coop_num[idx][i][j] = bordJson[keys[idx * 6 + i]][1][j]\n        }\n      }\n      const sectorData = []\n      const onePiece = this.chartConfig.arc / 30\n      const values = this.chartData.values_coop_num[idx]\n      // 分6次画扇形\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        let sector = ''\n        const points = []\n        // 每个扇形中有5个点\n        const temp = this.findMax(value)\n        for (let j = 0; j < value.length; j++) {\n          const r = this.chartConfig.sector_radius + value[j] / temp * this.chartConfig.sector_height\n          const x = r * Math.sin((i * 5 + j) * onePiece)\n          const y = r * Math.cos((i * 5 + j) * onePiece)\n          sector += x + ',' + y + ' '\n          points.push({\n            x: x,\n            y: y\n          })\n          if (j === value.length - 1) {\n            sector += 0 + ',' + 0 + ' '\n          }\n        }\n        sectorData.push({\n          polygon: sector,\n          points: points\n        })\n      }\n      return sectorData\n    },\n    findMax (array) {\n      let temp = 0\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] > temp) {\n          temp = array[i]\n        }\n      }\n      return temp\n    },\n    find1Max (array1, array2) {\n      let temp = array1[0]\n      for (let i = 0; i < array1.length; i++) {\n        if (array1[i] > temp) {\n          temp = array1[i]\n        }\n      }\n      for (let i = 0; i < array2.length; i++) {\n        if (array2[i] > temp) {\n          temp = array2[i]\n        }\n      }\n      return temp\n    },\n    find1Min (array1, array2) {\n      let temp = array1[0]\n      for (let i = 0; i < array1.length; i++) {\n        if (array1[i] < temp) {\n          temp = array1[i]\n        }\n      }\n      for (let i = 0; i < array2.length; i++) {\n        if (array2[i] < temp) {\n          temp = array2[i]\n        }\n      }\n      return temp\n    }\n  },\n  mounted () {\n    this.createRadarChart(180, 150, 0)\n    this.createRadarChart(180, 450, 1)\n    this.createRadarChart(180, 750, 2)\n  }\n}\n</script>\n\n<style>\n\n.container {\n  /*margin: 30px auto;*/\n  width: 100%;\n  height: 100%;\n  /*border: 1px solid #000;*/\n}\n\n.webs circle {\n  fill: white;\n  fill-opacity: 0.5;\n  stroke: white;\n  stroke-dasharray: 10, 5;\n}\n\n.lines line {\n  fill: white;\n  fill-opacity: 0.5;\n  /*stroke: red;*/\n  /*stroke-dasharray: 10, 5;*/\n}\n\n.areas polygon {\n  fill-opacity: 0.5;\n  stroke-width: 3;\n}\n\n.areas circle {\n  fill: white;\n  stroke-width: 3;\n}\n\n.sectors polygon {\n  fill-opacity: 0.5;\n  stroke-width: 3;\n}\n\n.sectors circle {\n  fill: white;\n  stroke-width: 1;\n}\n\n.texts text {\n  font-size: 10px;\n  text-anchor: middle;\n}\n\n.webs circle:nth-child(odd) {\n  fill: lightgray;\n}\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}