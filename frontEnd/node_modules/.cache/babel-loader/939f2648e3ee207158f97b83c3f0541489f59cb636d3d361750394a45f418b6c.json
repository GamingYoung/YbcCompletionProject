{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6f0a7ad4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container2\",\n  id: \"view2\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  id: \"view2\",\n  width: \"100%\",\n  height: \"100%\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"names":["class","id","_createElementVNode","width","height","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["/Users/younggaming/Documents/webstorm/ybcprogram/src/components/view12.vue"],"sourcesContent":["<template>\n  <div class=\"container2\" id=\"view2\">\n    <svg id=\"view2\" width=\"100%\" height=\"100%\"></svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport roseJson from '../../../../pyCharm/ybcProject/data/rose.json'\nexport default {\n  name: 'view1_2',\n  data () {\n    return {\n      chartConfig: {\n        ringValue: { innerRadius: 24, outerRadius: 26 },\n        range: [{ min: 2, max: 24 }, { min: 26, max: 48 }],\n        color: [['#0081C9', '#54B435'], ['#86E5EF', '#B6E2A1'], ['#86E5EF', '#B6E2A1']]\n      },\n      chartValue: {\n        selectButton: [0, 0, 0, 0, 0, 0, 0]\n      }\n    }\n  },\n  props: {\n    subNum: []\n  },\n  methods: {\n    createRoseChart () {\n      const that = this\n      that.chartValue.selectButton = that.subNum\n      const main2 = d3.select('#view2 svg')\n        .append('g')\n        .classed('main2', true)\n        .attr('transform', 'translate(' + 0 + ',' + 0 + ')')\n      // 画圆环\n      const roseData = that.getRoseData(roseJson, 'ST国华', '海量数据', that.chartValue.selectButton)\n      const roseChartData = that.calRingData(roseData)\n      console.log(roseChartData)\n      const views = main2.append('g')\n        .classed('views', true)\n      views.selectAll('g')\n        .data(roseData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'view' + (i + 1)\n        })\n      for (let i = 0; i < 7; i++) {\n        let view = views.select('.view' + (i + 1))\n        view = main2.append('g').attr('transform', 'translate(' + (158 * i + 50) + ',' + 80 + ')')\n        const arc = d3.arc()\n          .outerRadius(that.chartConfig.range[0].max)\n          .innerRadius(that.chartConfig.range[1].min)\n          .startAngle(0)\n          .endAngle(Math.PI * 2)\n        const ring = view.append('path')\n          .attr('d', arc)\n        ring.attr('fill', 'red')\n        const arcs = view.append('g')\n          .classed('arcs', true)\n        arcs.selectAll('g')\n          .data(roseData[i] + roseData[i])\n          .enter()\n          .append('g')\n          .attr('class', function (d, i) {\n            return 'arc' + (i + 1)\n          })\n        const subArcs = view.append('g')\n          .classed('subArcs', true)\n        subArcs.selectAll('g')\n          .data(roseData[i] + roseData[i])\n          .enter()\n          .append('g')\n          .attr('class', function (d, i) {\n            return 'subArc' + (i + 1)\n          })\n        for (let j = 0; j < 6; j++) {\n          let arc1 = arcs.select('.arc' + (2 * j + 1))\n          const keys = Object.keys(roseChartData[i][j])\n          const key = Object.keys(roseChartData[i][j][keys[0]][0])\n          arc1 = d3.arc()\n            .outerRadius(roseChartData[i][j][keys[0]][0][key[1]])\n            .innerRadius(roseChartData[i][j][keys[0]][0][key[0]])\n            .startAngle(j * Math.PI / 3)\n            .endAngle(j * Math.PI / 3 + Math.PI / 6)\n          const copArc = view.append('path')\n            .attr('d', arc1)\n          copArc.attr('fill', that.chartConfig.color[0][0])\n          let arc2 = arcs.select('.arc' + (2 * j + 2))\n          arc2 = d3.arc()\n            .outerRadius(roseChartData[i][j][keys[0]][1][key[1]])\n            .innerRadius(roseChartData[i][j][keys[0]][1][key[0]])\n            .startAngle(j * Math.PI / 3 + Math.PI / 6)\n            .endAngle((j + 1) * Math.PI / 3)\n          const copCorArc = view.append('path')\n            .attr('d', arc2)\n          copCorArc.attr('fill', that.chartConfig.color[0][1])\n        }\n        if (this.chartValue.selectButton[i] === 1) {\n          for (let j = 0; j < 6; j++) {\n            let arc1 = arcs.select('.subArc' + (2 * j + 1))\n            const keys = Object.keys(roseChartData[i][j])\n            const key = Object.keys(roseChartData[i][j][keys[1]][0])\n            arc1 = d3.arc()\n              .outerRadius(roseChartData[i][j][keys[1]][0][key[1]])\n              .innerRadius(roseChartData[i][j][keys[1]][0][key[0]])\n              .startAngle(j * Math.PI / 3)\n              .endAngle(j * Math.PI / 3 + Math.PI / 6)\n            const copArc = view.append('path')\n              .attr('d', arc1)\n            copArc.attr('fill', that.chartConfig.color[1][0])\n            let arc2 = arcs.select('.subArc' + (2 * j + 2))\n            arc2 = d3.arc()\n              .outerRadius(roseChartData[i][j][keys[1]][1][key[1]])\n              .innerRadius(roseChartData[i][j][keys[1]][1][key[0]])\n              .startAngle(j * Math.PI / 3 + Math.PI / 6)\n              .endAngle((j + 1) * Math.PI / 3)\n            const copCorArc = view.append('path')\n              .attr('d', arc2)\n            copCorArc.attr('fill', that.chartConfig.color[1][1])\n          }\n        } else if (this.chartValue.selectButton[i] === 2) {\n          for (let j = 0; j < 6; j++) {\n            let arc1 = arcs.select('.subArc' + (2 * j + 1))\n            const keys = Object.keys(roseChartData[i][j])\n            const key = Object.keys(roseChartData[i][j][keys[2]][0])\n            arc1 = d3.arc()\n              .outerRadius(roseChartData[i][j][keys[2]][0][key[1]])\n              .innerRadius(roseChartData[i][j][keys[2]][0][key[0]])\n              .startAngle(j * Math.PI / 3)\n              .endAngle(j * Math.PI / 3 + Math.PI / 6)\n            const copArc = view.append('path')\n              .attr('d', arc1)\n            copArc.attr('fill', that.chartConfig.color[2][0])\n            let arc2 = arcs.select('.subArc' + (2 * j + 2))\n            arc2 = d3.arc()\n              .outerRadius(roseChartData[i][j][keys[2]][1][key[1]])\n              .innerRadius(roseChartData[i][j][keys[2]][1][key[0]])\n              .startAngle(j * Math.PI / 3 + Math.PI / 6)\n              .endAngle((j + 1) * Math.PI / 3)\n            const copCorArc = view.append('path')\n              .attr('d', arc2)\n            copCorArc.attr('fill', that.chartConfig.color[2][1])\n          }\n        }\n      }\n    },\n    getRoseData (file, copName, corCopName, flags) {\n      const keys = Object.keys(file) // 每个指标\n      const rosesDatas = []\n      for (let i = 0; i < keys.length; i++) {\n        const roseDatas = [] // 每个指标\n        for (let j = 0; j < 6; j++) {\n          const roseData = []\n          const key = Object.keys(file[keys[i]][j + 4]) // 年份\n          for (let k = 0; k < file[keys[i]][j + 4][key[0]].length; k++) {\n            const copName = Object.keys(file[keys[i]][j + 4][key[0]][k]) // 公司\n            if (k === 0) { // 存在问题，对应cop\n              const index = Object.keys(file[keys[i]][j + 4][key[0]][k][copName[0]]) // 主指标和子指标\n              roseData.push({\n                main: file[keys[i]][j + 4][key[0]][k][copName[0]][index[0]],\n                sub1: file[keys[i]][j + 4][key[0]][k][copName[0]][index[1]],\n                sub2: file[keys[i]][j + 4][key[0]][k][copName[0]][index[2]]\n              })\n            } else if (k === 1) { // 存在问题，对应corCop\n              const index = Object.keys(file[keys[i]][j + 4][key[0]][k][copName[0]]) // 主指标和子指标\n              roseData.push({\n                main: file[keys[i]][j + 4][key[0]][k][copName[0]][index[0]],\n                sub1: file[keys[i]][j + 4][key[0]][k][copName[0]][index[1]],\n                sub2: file[keys[i]][j + 4][key[0]][k][copName[0]][index[2]]\n              })\n            }\n          }\n          roseDatas.push(roseData)\n        }\n        rosesDatas.push(roseDatas)\n      }\n      return rosesDatas\n    },\n    calRingData (data) {\n      const values = []\n      for (let i = 0; i < data.length; i++) {\n        const extremeValue = { max: 1, min: -1 }\n        for (let j = 0; j < 6; j++) {\n          for (let k = 0; k < 2; k++) {\n            if (data[i][j][k].main > 0 && data[i][j][k].main > extremeValue.max) {\n              extremeValue.max = data[i][j][k].main\n            } else if (data[i][j][k].main < 0 && data[i][j][k].main < extremeValue.min) {\n              extremeValue.min = data[i][j][k].main\n            }\n            if (data[i][j][k].sub1 > 0 && data[i][j][k].sub1 > extremeValue.max) {\n              extremeValue.max = data[i][j][k].sub1\n            } else if (data[i][j][k].sub1 < 0 && data[i][j][k].sub1 < extremeValue.min) {\n              extremeValue.min = data[i][j][k].sub1\n            }\n            if (data[i][j][k].sub2 > 0 && data[i][j][k].sub2 > extremeValue.max) {\n              extremeValue.max = data[i][j][k].sub2\n            } else if (data[i][j][k].sub2 < 0 && data[i][j][k].sub2 < extremeValue.min) {\n              extremeValue.min = data[i][j][k].sub2\n            }\n          }\n        }\n        console.log(extremeValue)\n        const value = []\n        for (let j = 0; j < 6; j++) {\n          const arcRadiusMain = [{ inner: 0, outer: 0 }, { inner: 0, outer: 0 }]\n          const arcRadiusSub1 = [{ inner: 0, outer: 0 }, { inner: 0, outer: 0 }]\n          const arcRadiusSub2 = [{ inner: 0, outer: 0 }, { inner: 0, outer: 0 }]\n          for (let k = 0; k < 2; k++) {\n            // main\n            if (data[i][j][k].main > 0) {\n              arcRadiusMain[k].inner = this.chartConfig.ringValue.outerRadius\n              arcRadiusMain[k].outer = data[i][j][k].main / extremeValue.max * (this.chartConfig.range[1].max - this.chartConfig.range[1].min) + this.chartConfig.ringValue.outerRadius\n            } else if (data[i][j][k].main < 0) {\n              arcRadiusMain[k].inner = this.chartConfig.ringValue.innerRadius - data[i][j][k].main / extremeValue.min * (this.chartConfig.range[0].max - this.chartConfig.range[0].min)\n              arcRadiusMain[k].outer = this.chartConfig.ringValue.innerRadius\n            }\n            // sub1\n            if (data[i][j][k].sub1 > 0) {\n              arcRadiusSub1[k].inner = this.chartConfig.ringValue.outerRadius\n              arcRadiusSub1[k].outer = data[i][j][k].sub1 / extremeValue.max * (this.chartConfig.range[1].max - this.chartConfig.range[1].min) + this.chartConfig.ringValue.outerRadius\n            } else if (data[i][j][k].sub1 < 0) {\n              arcRadiusSub1[k].inner = this.chartConfig.ringValue.innerRadius - data[i][j][k].sub1 / extremeValue.min * (this.chartConfig.range[0].max - this.chartConfig.range[0].min)\n              arcRadiusSub1[k].outer = this.chartConfig.ringValue.innerRadius\n            } else {\n              arcRadiusSub1[k].inner = this.chartConfig.ringValue.innerRadius\n              arcRadiusSub1[k].outer = this.chartConfig.ringValue.innerRadius\n            }\n            // sub2\n            if (data[i][j][k].sub2 > 0) {\n              arcRadiusSub2[k].inner = this.chartConfig.ringValue.outerRadius\n              arcRadiusSub2[k].outer = data[i][j][k].sub2 / extremeValue.max * (this.chartConfig.range[1].max - this.chartConfig.range[1].min) + this.chartConfig.ringValue.outerRadius\n            } else if (data[i][j][k].sub2 < 0) {\n              arcRadiusSub2[k].inner = this.chartConfig.ringValue.innerRadius - data[i][j][k].sub2 / extremeValue.min * (this.chartConfig.range[0].max - this.chartConfig.range[0].min)\n              arcRadiusSub2[k].outer = this.chartConfig.ringValue.innerRadius\n            } else {\n              arcRadiusSub2[k].inner = this.chartConfig.ringValue.innerRadius\n              arcRadiusSub2[k].outer = this.chartConfig.ringValue.innerRadius\n            }\n          }\n          value.push({\n            Main: arcRadiusMain,\n            sub1: arcRadiusSub1,\n            sub2: arcRadiusSub2\n          })\n        }\n        values.push(value)\n      }\n      return values\n    }\n  },\n  mounted () {\n    this.createRoseChart()\n  }\n}\n</script>\n\n<style scoped>\n\n.container2 {\n  width: 100%;\n  height: 100%;\n  /*border: 2px solid black;*/\n}\n\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC,YAAY;EAACC,EAAE,EAAC;;gEACzBC,mBAAA,CAAiD;EAA5CD,EAAE,EAAC,OAAO;EAACE,KAAK,EAAC,MAAM;EAACC,MAAM,EAAC;;oBAApCC,UAAiD,C;;uBADnDC,mBAAA,CAEM,OAFNC,UAEM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}