{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-68371858\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container32\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"100%\",\n  height: \"100%\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"names":["class","_createElementVNode","width","height","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["/Users/younggaming/Documents/GitHub/YbcCompletionProject/frontEnd/src/components/view32.vue"],"sourcesContent":["<template>\n  <div class=\"container32\">\n    <svg width=\"100%\" height=\"100%\"></svg>\n  </div>\n</template>\n\n<script>\nimport axisJson from '../../../backEnd/data/scatterStatic/axis1.json'\nimport pointJson2 from '../../../backEnd/data/scatterStatic/point_2.json'\nimport pointJson3 from '../../../backEnd/data/scatterStatic/point_3.json'\nimport pointJson4 from '../../../backEnd/data/scatterStatic/point_4.json'\nimport pointJson5 from '../../../backEnd/data/scatterStatic/point_5.json'\nimport pointJson6 from '../../../backEnd/data/scatterStatic/point_6.json'\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'view3_2',\n  data () {\n    return {\n      chartValue: {\n        showAll: [14, 18, 25, 24, 22, 7],\n        file: [pointJson2, pointJson3, pointJson4, pointJson5, pointJson6]\n      },\n      chartConfig: {\n        margin: 0,\n        squareValue: 270,\n        axisValue: [30, 80, 130, 180, 230],\n        pointColor: [\n          ['#C8C8C8', '#000082', '#008200', '#820000', '#828200', '#820082'],\n          ['#000000', '#0000FF', '#00FF00', '#FF0000', '#FFFF00', '#FF00FF']\n        ]\n      }\n    }\n  },\n  methods: {\n    getColor (idx, proportion) {\n      const palette = [ // 从上到下：绿黄蓝紫灰红\n        ['#C8C8FF', '#000082'],\n        ['#C8FFC8', '#008200'],\n        ['#FFC8C8', '#820000'],\n        ['#C8FFC8', '#008200'],\n        ['#FFC8C8', '#820000'],\n        ['#C8FFC8', '#008200']\n      ]\n      const i = d3.interpolateLab(palette[idx][0], palette[idx][1])\n      return i(proportion)\n    },\n    creatScatterChart () {\n      // D3画图中this指代对象会发生改变\n      const that = this\n      const main = d3.select('.container32 svg')\n        .append('g')\n        .classed('main', true)\n        .attr('transform', 'translate(' + 0 + ',' + 0 + ')')\n      const coordinations = that.calSquareCoordinates(4)\n      const squares = main.append('g')\n        .classed('squares', true)\n      squares.selectAll('g')\n        .data(coordinations)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'square' + (i + 1)\n        })\n      for (let i = 0; i < coordinations.length; i++) {\n        console.log(coordinations.length)\n        const square = squares.select('.square' + (i + 1))\n        const coordination = coordinations[i]\n        square.append('rect')\n          .attr('x', coordination.x)\n          .attr('y', coordination.y)\n          .attr('width', that.chartConfig.squareValue)\n          .attr('height', that.chartConfig.squareValue)\n          // .attr('stroke', 'red')\n          .attr('fill', 'none')\n        const axiss = square.append('g')\n          .classed('axiss', true)\n          .attr('transform', 'translate(' + coordination.x + ',' + coordination.y + ')')\n        axiss.selectAll('g')\n          .data(that.getAxiss()[that.chartValue.showAll[i]])\n          .enter()\n          .append('g')\n          .attr('class', function (d, i) {\n            return 'axis' + (i + 1)\n          })\n        const smallSquares = square.append('g')\n          .classed('smallSquares', true)\n          .attr('transform', 'translate(' + coordination.x + ',' + coordination.y + ')')\n        smallSquares.selectAll('g')\n          .data(that.getAxiss()[that.chartValue.showAll[i]])\n          .enter()\n          .append('g')\n          .attr('class', function (d, i) {\n            return 'smallSquare' + (i + 1)\n          })\n        for (let k = 0; k < that.getAxiss()[that.chartValue.showAll[i]].length; k++) {\n          const axis = axiss.select('.axis' + (k + 1))\n          const smallSquare = smallSquares.select('.smallSquare' + (k + 1))\n          if (i % 2 === 0) {\n            axis.append('rect')\n              // 按照 4 3 2 1 0进行作图\n              .attr('x', that.chartConfig.axisValue[that.getAxiss()[that.chartValue.showAll[i]].length - 1 - k] + 5)\n              .attr('y', 10)\n              .attr('width', 40)\n              .attr('height', 10)\n              .attr('fill', function (d, index) {\n                return that.getColor(i, that.getAxiss()[that.chartValue.showAll[i]][k].proportion)\n              })\n            for (let j = 0; j < that.getAxiss()[that.chartValue.showAll[i]].length; j++) {\n              smallSquare.append('rect')\n                .attr('x', that.chartConfig.axisValue[k])\n                .attr('y', that.chartConfig.axisValue[j])\n                .attr('width', 50)\n                .attr('height', 50)\n                .attr('fill', 'none')\n                .attr('stroke-width', 1)\n                .attr('stroke', 'black')\n                .attr('stroke-dasharray', 2)\n            }\n          } else {\n            axis.append('rect')\n              .attr('y', that.chartConfig.axisValue[that.getAxiss()[that.chartValue.showAll[i]].length - 1 - k] + 5)\n              .attr('x', 10)\n              .attr('width', 10)\n              .attr('height', 40)\n              .attr('fill', function (d, index) {\n                return that.getColor(i, that.getAxiss()[that.chartValue.showAll[i]][k].proportion)\n              })\n            for (let j = 0; j < that.getAxiss()[that.chartValue.showAll[i]].length; j++) {\n              smallSquare.append('rect')\n                .attr('x', that.chartConfig.axisValue[j])\n                .attr('y', that.chartConfig.axisValue[k])\n                .attr('width', 50)\n                .attr('height', 50)\n                .attr('fill', 'none')\n                .attr('stroke-width', 1)\n                .attr('stroke', 'black')\n                .attr('stroke-dasharray', 2)\n            }\n          }\n        }\n        const pointsData = that.getPoints(that.chartValue.file[i], 0)\n        const pointsCoordinates = that.calPointsCoordinates(pointsData.points, that.getAxiss()[that.chartValue.showAll[i]], that.getAxiss()[that.chartValue.showAll[i + 1]], i % 2)\n        const points = main.append('g')\n          .classed('points', true)\n        points.selectAll('points')\n          .data(pointsCoordinates)\n          .enter()\n          .append('circle')\n          .attr('cx', function (d) {\n            return d.x + coordinations[i].x\n          })\n          .attr('cy', function (d) {\n            return d.y + coordinations[i].y\n          })\n          .attr('r', 3)\n          .attr('fill', function (d) {\n            return d.pointColor\n          })\n        const starsCoordinates = that.calPointsCoordinates(pointsData.stars, that.getAxiss()[that.chartValue.showAll[i]], that.getAxiss()[that.chartValue.showAll[i + 1]], i % 2)\n        const star = main.append('g')\n          .attr('transform', 'translate(' + (starsCoordinates[0].x + coordinations[i].x) + ',' + (starsCoordinates[0].y + coordinations[i].y) + ')')\n          .append('path')\n          .attr('d', d3.symbol().type(d3.symbolStar).size(40))\n          .attr('stroke', 'black')\n          .attr('stroke-width', 'black')\n        star.attr('fill', starsCoordinates[0].pointColor)\n      }\n    },\n    // 获取axis.json文件里的数据，返回一个26*5的数组，元素为min，max，proportion\n    getAxiss () {\n      // keys为第一层26个title\n      // key1为里面title，就一个，只有0可用\n      // 读取数组里范围的格式：axisJson[keys[0]][0][keys1[0]][0][0]\n      // 读取数组里比例的格式：axisJson[keys[0]][0][keys1[0]][1]\n      const keys = Object.keys(axisJson)\n      const axiss = []\n      for (let i = 0; i < keys.length; i++) {\n        const axis = []\n        for (let k = 0; k < axisJson[keys[i]].length; k++) {\n          const key1 = Object.keys(axisJson[keys[i]][k])\n          const min = axisJson[keys[i]][k][key1[0]][0][0]\n          const max = axisJson[keys[i]][k][key1[0]][0][1]\n          const proportion = axisJson[keys[i]][k][key1[0]][1]\n          axis.push({\n            min: min,\n            max: max,\n            proportion: proportion\n          })\n        }\n        axiss.push(axis)\n      }\n      return axiss\n    },\n    // 获取point和point_obj文件里点的数据，返回一个数组，元素为x,y,axis\n    getPoints (fileName, highLight) {\n      const pointsFile = fileName\n      const pointKeys = Object.keys(pointsFile)\n      const points = []\n      const stars = []\n      for (let i = 0; i < pointKeys.length; i++) {\n        const x = pointsFile[pointKeys[i]][0][0]\n        const y = pointsFile[pointKeys[i]][0][1]\n        if (x !== '0.00' && y !== '0.00' && pointsFile[pointKeys[i]][3] === 0) {\n          const num1 = pointsFile[pointKeys[i]][1]\n          const num2 = pointsFile[pointKeys[i]][2]\n          points.push({\n            name: pointKeys[i],\n            x: x,\n            y: y,\n            pointColor: highLight === num2 ? this.chartConfig.pointColor[1][num1 + 1] : this.chartConfig.pointColor[0][num1 + 1]\n          })\n        } else if (x !== '0.00' && y !== '0.00' && pointsFile[pointKeys[i]][3] === 1) {\n          const num1 = pointsFile[pointKeys[i]][1]\n          const num2 = pointsFile[pointKeys[i]][2]\n          stars.push({\n            name: pointKeys[i],\n            x: x,\n            y: y,\n            pointColor: highLight === num2 ? this.chartConfig.pointColor[1][num1 + 1] : this.chartConfig.pointColor[0][num1 + 1]\n          })\n        }\n      }\n      const point = {\n        points: points,\n        stars: stars\n      }\n      return point\n    },\n    // 传入数据分别为点数据，本轴数据，外轴数据，奇偶判别\n    // 按轴输出点的坐标,以及对应的颜色\n    calPointsCoordinates (pointsData, axisData1, axisData2, flag) {\n      const points = []\n      for (let i = 0; i < pointsData.length; i++) {\n        const sliceX = this.calSliceY(pointsData[i].x, axisData1)\n        const sliceY = this.calSliceY(pointsData[i].y, axisData2)\n        if (flag === 0) {\n          const x = this.chartConfig.axisValue[axisData1.length - 1 - sliceX] + 40 - (pointsData[i].x - axisData1[sliceX].min) / (axisData1[sliceX].max - axisData1[sliceX].min) * 40\n          const y = this.chartConfig.axisValue[axisData2.length - 1 - sliceY] + 40 - (pointsData[i].y - axisData2[sliceY].min) / (axisData2[sliceY].max - axisData2[sliceY].min) * 40\n          points.push({\n            x: x,\n            y: y,\n            pointColor: pointsData[i].pointColor\n          })\n        } else {\n          const y = this.chartConfig.axisValue[axisData1.length - 1 - sliceX] + 40 - (pointsData[i].x - axisData1[sliceX].min) / (axisData1[sliceX].max - axisData1[sliceX].min) * 40\n          const x = this.chartConfig.axisValue[axisData2.length - 1 - sliceY] + 40 - (pointsData[i].y - axisData2[sliceY].min) / (axisData2[sliceY].max - axisData2[sliceY].min) * 40\n          points.push({\n            x: x,\n            y: y,\n            pointColor: pointsData[i].pointColor\n          })\n        }\n      }\n      return points\n    },\n    calSliceY (y, axisData) {\n      for (let i = 0; i < axisData.length; i++) {\n        if (y <= axisData[i].max && y >= axisData[i].min) {\n          return i\n        }\n      }\n    },\n    // 计算大正方形的起点坐标，idx为第idx个\n    calSquareCoordinates (idx) {\n      const coordinations = []\n      for (let i = 0; i <= idx; i++) {\n        coordinations.push((i % 2 === 0) ? { x: i / 2 * this.chartConfig.squareValue, y: (i / 2) * this.chartConfig.squareValue } : { x: (i + 1) / 2 * this.chartConfig.squareValue, y: (i - 1) / 2 * this.chartConfig.squareValue })\n      }\n      return coordinations\n    }\n  },\n  mounted () {\n    this.creatScatterChart()\n  }\n}\n</script>\n\n<style scoped>\n\n.container32 {\n  width: 100%;\n  height: 100%;\n  /*border: 2px solid red;*/\n}\n\n.smallSquare rect {\n  /*border: 2px solid black;*/\n}\n\n.axiss rect {\n  /*border: 2px solid black;*/\n}\n\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAa;gEACtBC,mBAAA,CAAsC;EAAjCC,KAAK,EAAC,MAAM;EAACC,MAAM,EAAC;;oBAAzBC,UAAsC,C;;uBADxCC,mBAAA,CAEM,OAFNC,UAEM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}