{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\",\n  id: \"view3\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"svg\", {\n  width: \"100%\",\n  height: \"100%\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"names":["class","id","_createElementVNode","width","height","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["/Users/younggaming/Documents/webstorm/ybcprogram/src/components/view2.vue"],"sourcesContent":["<template>\n  <div class=\"container\" id=\"view3\">\n    <svg width=\"100%\" height=\"100%\"></svg>\n  </div>\n\n</template>\n\n<script>\nimport radarAxisJson from '../../../../pyCharm/ybcProject/data/radar_axis.json'\nimport radarJson from '../../../../pyCharm/ybcProject/data/radar_detail.json'\nimport bordJson from '../../../../pyCharm/ybcProject/data/bord.json'\nimport * as d3 from 'd3'\nexport default {\n  name: 'view_2',\n  data () {\n    return {\n      chartData: {\n        fieldNames: [\n          ['流动比率', '速动比率', '现金比率', '资产负债率', '所有者权益比率', '产权比率'],\n          ['流动资产周转率', '流动资产利润率', '固定资产周转率', '固定资产利润率', '总资产周转率', '总资产利润率'],\n          ['营业毛利率', '净利润率', '营业利润率', '成本费用利润率', '总资产报酬率', '总负债报酬率']\n        ],\n        values: [\n          [[10, 20, 30, 40, 50, 60], [10, 20, 30, 40, 100, 100]],\n          [[10, 20, 30, 40, 50, 60], [10, 20, 30, 40, 100, 100]],\n          [[10, 20, 30, 40, 50, 60], [10, 20, 30, 40, 100, 100]]\n        ],\n        values_coop_num: [\n          [[1, 1, 0, 1, 0], [1, 2, 3, 4, 5], [30, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 30, 4, 5], [1, 2, 3, 4, 5]],\n          [[1, 1, 0, 1, 0], [1, 2, 3, 4, 5], [30, 30, 30, 30, 30], [1, 2, 3, 4, 5], [1, 2, 30, 4, 5], [1, 2, 3, 4, 5]],\n          [[1, 1, 0, 1, 0], [1, 2, 3, 4, 5], [30, 30, 30, 30, 30], [1, 2, 3, 4, 5], [1, 2, 30, 4, 5], [30, 30, 30, 30, 30]]\n        ],\n        values_num: [\n          [0.75, 0.2],\n          [1.2, 3.4],\n          [1.3, 2.4],\n          [3.5, 1.5],\n          [4, 3.4],\n          [1.3, 1.4]\n        ] // 轴上公司位置数组？？？\n      },\n      chartConfig: {\n        // 调整雷达图的大小\n        radius: 105,\n        // 雷达图外扇形半径\n        sector_radius: 120,\n        // 雷达图外扇形高度\n        sector_height: 25,\n        // 指标的数量，和fieldNames的长度相同\n        total: 6,\n        // 网轴的级数，网轴上从小到大有多少个正方形\n        level: 5,\n        rangeMin: 0,\n        rangeMax: 100,\n        arc: 2 * Math.PI\n      }\n    }\n  },\n  props: {\n    corCop: Number\n  },\n  methods: {\n    // 计算轴颜色和扇形颜色盘\n    // 公司和对比公司的颜色盘\n    getColorCoop (idx) {\n      const palette = ['#0081C9', '#54B435']\n      return palette[idx % palette.length]\n    },\n    getColor (idx, proportion) {\n      const palette = [ // 从上到下：绿黄蓝紫灰红\n        ['#2ca25f', '#99d8c9'],\n        ['#fdae6b', '#ffeda0'],\n        ['#3182bd', '#9ecae1'],\n        ['#756bb1', '#bcbddc'],\n        ['#636363', '#bdbdbd'],\n        ['#f03b20', '#feb24c']\n      ]\n      const i = d3.interpolateLab(palette[idx][0], palette[idx][1])\n      return i(proportion)\n    },\n    createRadarChart (width, height, idx) {\n      // 给data里的值赋值\n      // this.chartData.values_main[0][0] = 100\n      const that = this\n      const main = d3.select('#view3 svg')\n        .append('g')\n        .classed('main', true)\n        // 可以这么写数据，圆中心位置\n        .attr('transform', 'translate(' + width + ',' + height + ')')\n      const onePiece = this.chartConfig.arc / this.chartConfig.total\n      // 每个点坐标\n      const polygons = {\n        webs: [],\n        webPoints: [],\n        // 同心圆半径\n        radius_circle: []\n      }\n      // 计算每一层坐标\n      for (let k = this.chartConfig.level; k > 0; k--) {\n        let webs = ''\n        const webPoints = []\n        const r = this.chartConfig.radius / this.chartConfig.level * k\n        polygons.radius_circle.push(r)\n        // 计算一层中每个点的坐标\n        for (let i = 0; i < this.chartConfig.total; i++) {\n          const x = r * Math.sin(i * onePiece)\n          const y = r * Math.cos(i * onePiece)\n          const temp = this.findMax(this.chartData.values_coop_num[idx][i])\n          webs += x + ',' + y + ' '\n          webPoints.push({\n            x: x,\n            y: y,\n            proportion: this.chartData.values_coop_num[idx][i][k] / temp\n          })\n        }\n        polygons.webs.push(webs)\n        polygons.webPoints.push(webPoints)\n      }\n      // 画圆外侧扇形区域\n      const sectorsData = this.calcSectorData(idx)\n      const sectors = main.append('g')\n        .classed('sectors', true)\n      sectors.selectAll('g')\n        .data(sectorsData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'sector' + (i + 1)\n        })\n      for (let i = 0; i < sectorsData.length; i++) {\n        // 遍历每个雷达图区域\n        const sector = sectors.select('.sector' + (i + 1))\n        const sectorData = sectorsData[i]\n        sector.append('polygon')\n          .attr('points', sectorData.polygon)\n          .attr('fill', function (d, index) {\n            return that.getColor(i, 0.5)\n          })\n        // .attr('fill', 'none')\n        const circles = sector.append('g')\n          .classed('circles', true)\n        circles.selectAll('circles')\n          .data(sectorData.points)\n          .enter()\n          .append('circle')\n          .attr('cx', function (d) {\n            return d.x\n          })\n          .attr('cy', function (d) {\n            return d.y\n          })\n          .attr('r', 1.5)\n          .attr('stroke', function (d, index) {\n            return that.getColor(i, 0.5)\n          })\n      }\n      // 给两条直线中上色可转换成一条线上色，将第二条线内换成别的颜色就可以\n      // 将扇形的多余部分用空白圆覆盖\n      const shadow = main.append('circle')\n      shadow.attr('cx', 0)\n        .attr('cy', 0)\n        .attr('r', this.chartConfig.sector_radius)\n        .attr('fill', 'white')\n      // 同心圆\n      const webs = main.append('g')\n        .classed('webs', true)\n      webs.selectAll('circle')\n        .data(polygons.radius_circle)\n        .enter()\n        .append('circle')\n        .attr('cx', '0')\n        .attr('cy', '0')\n        .attr('r', function (d) {\n          return d\n        })\n      // 画轴\n      const axissData = this.calcAxisData(polygons, idx)\n      const lines = main.append('g')\n        .classed('lines', true)\n      lines.selectAll('g')\n        .data(axissData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'line' + (i + 1)\n        })\n      for (let i = 0; i < this.chartConfig.total * this.chartConfig.level; i++) {\n        const temp = i % 6\n        const line = lines.select('.line' + (i + 1))\n        line.append('line')\n          .attr('x1', 0)\n          .attr('y1', 0)\n          .attr('x2', axissData[i].x)\n          .attr('y2', axissData[i].y)\n          .attr('stroke', function (d, index) {\n            return that.getColor(temp, axissData[i].proportion)\n          })\n      }\n      // 标注公司位置\n      // const copData = this.calcCopData()\n      // 计算点的位置\n      const areasData = this.calcAreaData(idx)\n      // 添加g分组包含所有雷达图区域\n      const areas = main.append('g')\n        .classed('areas', true)\n      // 添加g分组包含雷达图区域下的多边形和圆点\n      areas.selectAll('g')\n        .data(areasData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'area' + (i + 1)\n        })\n      for (let i = 0; i < areasData.length; i++) {\n        // 遍历每个雷达图区域\n        const area = areas.select('.area' + (i + 1))\n        const areaData = areasData[i]\n        area.append('polygon')\n          .attr('points', areaData.polygon)\n          .attr('stroke', function (d, index) {\n            return that.getColorCoop(i)\n          })\n          .attr('fill', 'none')\n        // 绘制雷达图定点\n        const circles = area.append('g')\n          .classed('circles', true)\n        circles.selectAll('circles')\n          .data(areaData.points)\n          .enter()\n          .append('circle')\n          .attr('cx', function (d) {\n            return d.x\n          })\n          .attr('cy', function (d) {\n            return d.y\n          })\n          .attr('r', 3)\n          .attr('stroke', function (d, index) {\n            return that.getColorCoop(i)\n          })\n      }\n      // 计算文字坐标\n      const textPoints = []\n      // 文字坐标位置\n      const textRadius = this.chartConfig.radius + 30\n      for (let i = 0; i < this.chartConfig.total; i++) {\n        const x = textRadius * Math.sin(i * onePiece)\n        const y = textRadius * Math.cos(i * onePiece)\n        textPoints.push({\n          x: x,\n          y: y\n        })\n      }\n      // 添加到画布\n      const texts = main.append('g')\n        .classed('texts', true)\n      texts.selectAll('text')\n        .data(textPoints)\n        .enter()\n        .append('text')\n        .attr('x', function (d) {\n          return d.x\n        })\n        .attr('y', function (d) {\n          return d.y\n        })\n        .text(function (d, i) {\n          return that.chartData.fieldNames[idx][i]\n        })\n    },\n    // 计算轴上公司位置\n    calcCopData () {\n      const CopData = []\n      const onePiece = this.chartConfig.arc / this.chartConfig.total\n      const values = this.chartData.values_num\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        for (let j = 0; j < value.length; j++) {\n          const r = value[j] / 5 * this.chartConfig.radius\n          const x = r * Math.sin(i * onePiece)\n          const y = r * Math.cos(i * onePiece)\n          CopData.push({\n            x: x,\n            y: y,\n            r: r\n          })\n        }\n      }\n      return CopData\n    },\n    calcAxisData (polygons, idx) {\n      const axisData = []\n      for (let i = 0; i < polygons.webPoints.length; i++) {\n        for (let j = 0; j < polygons.webPoints[i].length; j++) {\n          axisData.push({\n            x: polygons.webPoints[i][j].x,\n            y: polygons.webPoints[i][j].y,\n            proportion: this.chartData.values_coop_num[idx][j][i]\n          })\n        }\n      }\n      return axisData\n    },\n    calcAreaData (idx) {\n      const keys = Object.keys(radarJson)\n      for (let i = 0; i < 6; i++) {\n        const key1 = Object.keys(radarJson[keys[0]])\n        this.chartData.values[idx][0][i] = radarJson[keys[0]][key1[[idx * 6 + i]]]\n        const key2 = Object.keys(radarJson[keys[this.corCop]])\n        this.chartData.values[idx][1][i] = radarJson[keys[this.corCop]][key2[[idx * 6 + i]]]\n      }\n      const areasData = []\n      const onePiece = this.chartConfig.arc / this.chartConfig.total\n      const values = this.chartData.values[idx]\n      this.chartConfig.rangeMax = this.find1Max(values[0], values[1])\n      this.chartConfig.rangeMin = this.find1Min(values[0], values[1])\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        let area = ''\n        const points = []\n        for (let k = 0; k < this.chartConfig.total; k++) {\n          const r = this.chartConfig.radius * (value[k] - this.chartConfig.rangeMin) / (this.chartConfig.rangeMax - this.chartConfig.rangeMin)\n          const x = r * Math.sin(k * onePiece)\n          const y = r * Math.cos(k * onePiece)\n          area += x + ',' + y + ' '\n          points.push({\n            x: x,\n            y: y\n          })\n        }\n        areasData.push({\n          // 用于画连线的定义\n          polygon: area,\n          // 用于计算单个点的定义\n          points: points\n        })\n      }\n      return areasData\n    },\n    calcSectorData (idx) {\n      const keys = Object.keys(bordJson)\n      for (let i = 0; i < 6; i++) {\n        for (let j = 0; j < 5; j++) {\n          this.chartData.values_coop_num[idx][i][j] = bordJson[keys[idx * 6 + i]][1][j]\n        }\n      }\n      const sectorData = []\n      const onePiece = this.chartConfig.arc / 30\n      const values = this.chartData.values_coop_num[idx]\n      // 分6次画扇形\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        let sector = ''\n        const points = []\n        // 每个扇形中有5个点\n        const temp = this.findMax(value)\n        for (let j = 0; j < value.length; j++) {\n          const r = this.chartConfig.sector_radius + value[j] / temp * this.chartConfig.sector_height\n          const x = r * Math.sin((i * 5 + j) * onePiece)\n          const y = r * Math.cos((i * 5 + j) * onePiece)\n          sector += x + ',' + y + ' '\n          points.push({\n            x: x,\n            y: y\n          })\n          if (j === value.length - 1) {\n            sector += 0 + ',' + 0 + ' '\n          }\n        }\n        sectorData.push({\n          polygon: sector,\n          points: points\n        })\n      }\n      return sectorData\n    },\n    findMax (array) {\n      let temp = 0\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] > temp) {\n          temp = array[i]\n        }\n      }\n      return temp\n    },\n    find1Max (array1, array2) {\n      let temp = array1[0]\n      for (let i = 1; i < array1.length; i++) {\n        if (array1[i] > temp) {\n          temp = array1[i]\n        }\n      }\n      for (let i = 0; i < array2.length; i++) {\n        if (array2[i] > temp) {\n          temp = array2[i]\n        }\n      }\n      return temp\n    },\n    find1Min (array1, array2) {\n      let temp = array1[0]\n      for (let i = 1; i < array1.length; i++) {\n        if (array1[i] < temp) {\n          temp = array1[i]\n        }\n      }\n      for (let i = 0; i < array2.length; i++) {\n        if (array2[i] < temp) {\n          temp = array2[i]\n        }\n      }\n      return temp\n    }\n  },\n  mounted () {\n    this.createRadarChart(180, 150, 0)\n    this.createRadarChart(180, 450, 1)\n    this.createRadarChart(180, 750, 2)\n  }\n}\n</script>\n\n<style>\n\n.container {\n  /*margin: 30px auto;*/\n  width: 100%;\n  height: 100%;\n  /*border: 1px solid #000;*/\n}\n\n.webs circle {\n  fill: white;\n  fill-opacity: 0.5;\n  stroke: white;\n  stroke-dasharray: 10, 5;\n}\n\n.lines line {\n  fill: white;\n  fill-opacity: 0.5;\n  /*stroke: red;*/\n  stroke-dasharray: 10, 5;\n}\n\n.areas polygon {\n  fill-opacity: 0.5;\n  stroke-width: 3;\n}\n\n.areas circle {\n  fill: white;\n  stroke-width: 3;\n}\n\n.sectors polygon {\n  fill-opacity: 0.5;\n  stroke-width: 3;\n}\n\n.sectors circle {\n  fill: white;\n  stroke-width: 1;\n}\n\n.texts text {\n  font-size: 10px;\n  text-anchor: middle;\n}\n\n.webs circle:nth-child(odd) {\n  fill: lightgray;\n}\n\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC,WAAW;EAACC,EAAE,EAAC;;gCACxBC,mBAAA,CAAsC;EAAjCC,KAAK,EAAC,MAAM;EAACC,MAAM,EAAC;;oBAAzBC,UAAsC,C;;uBADxCC,mBAAA,CAEM,OAFNC,UAEM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}