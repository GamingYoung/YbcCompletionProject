{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport radarAxisJson from '../../../../pyCharm/ybcProject/data/radar_axis.json';\nimport radarJson from '../../../../pyCharm/ybcProject/data/radar_detail.json';\nimport bordJson from '../../../../pyCharm/ybcProject/data/bord.json';\nimport * as d3 from 'd3';\nexport default {\n  name: 'view_2',\n  data() {\n    return {\n      chartData: {\n        fieldNames: [['流动比率', '速动比率', '现金比率', '资产负债率', '所有者权益比率', '产权比率'], ['流动资产周转率', '流动资产利润率', '固定资产周转率', '固定资产利润率', '总资产周转率', '总资产利润率'], ['营业毛利率', '净利润率', '营业利润率', '成本费用利润率', '总资产报酬率', '总负债报酬率']],\n        values: [[10, 20, 30, 40, 50, 60], [90, 80, 70, 60, 50, 40]],\n        values_compare: [[10, 20, 30, 40, 50, 60], [90, 80, 70, 60, 50, 40]],\n        values_coop_num: [[1, 1, 0, 1, 0], [1, 2, 3, 4, 5], [30, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 30, 4, 5], [1, 2, 3, 4, 5]],\n        values_num: [[0.75, 0.2], [1.2, 3.4], [1.3, 2.4], [3.5, 1.5], [4, 3.4], [1.3, 1.4]]\n      },\n      chartConfig: {\n        // 调整雷达图的大小\n        radius: 105,\n        // 雷达图外扇形半径\n        sector_radius: 120,\n        // 雷达图外扇形高度\n        sector_height: 30,\n        // 指标的数量，和fieldNames的长度相同\n        total: 6,\n        // 网轴的级数，网轴上从小到大有多少个正方形\n        level: 5,\n        rangeMin: 0,\n        rangeMax: 100,\n        arc: 2 * Math.PI\n      }\n    };\n  },\n  methods: {\n    // 计算轴颜色和扇形颜色盘\n    // 公司和对比公司的颜色盘\n    getColorCoop(idx) {\n      const palette = ['#f5994e', '#7eb00a'];\n      return palette[idx % palette.length];\n    },\n    getColor(idx, proportion) {\n      const palette = [\n      // 从上到下：绿黄蓝紫灰红\n      ['#2ca25f', '#99d8c9'], ['#fdae6b', '#ffeda0'], ['#3182bd', '#9ecae1'], ['#756bb1', '#bcbddc'], ['#636363', '#bdbdbd'], ['#f03b20', '#feb24c']];\n      const i = d3.interpolateLab(palette[idx][0], palette[idx][1]);\n      return i(proportion);\n    },\n    createRadarChart(width, height, idx) {\n      // 给data里的值赋值\n      // this.chartData.values_main[0][0] = 100\n      const that = this;\n      const main = d3.select('#view3 svg').append('g').classed('main', true)\n      // 可以这么写数据，圆中心位置\n      .attr('transform', 'translate(' + width + ',' + height + ')');\n      const onePiece = this.chartConfig.arc / this.chartConfig.total;\n      // 每个点坐标\n      const polygons = {\n        webs: [],\n        webPoints: [],\n        // 同心圆半径\n        radius_circle: []\n      };\n      // 计算每一层坐标\n      for (let k = this.chartConfig.level; k > 0; k--) {\n        let webs = '';\n        const webPoints = [];\n        const r = this.chartConfig.radius / this.chartConfig.level * k;\n        polygons.radius_circle.push(r);\n        // 计算一层中每个点的坐标\n        for (let i = 0; i < this.chartConfig.total; i++) {\n          const x = r * Math.sin(i * onePiece);\n          const y = r * Math.cos(i * onePiece);\n          const temp = this.findMax(this.chartData.values_coop_num[i]);\n          webs += x + ',' + y + ' ';\n          webPoints.push({\n            x: x,\n            y: y,\n            proportion: this.chartData.values_coop_num[i][k] / temp\n          });\n        }\n        polygons.webs.push(webs);\n        polygons.webPoints.push(webPoints);\n      }\n      // 画圆外侧扇形区域\n      const sectorsData = this.calcSectorData();\n      const sectors = main.append('g').classed('sectors', true);\n      sectors.selectAll('g').data(sectorsData).enter().append('g').attr('class', function (d, i) {\n        return 'sector' + (i + 1);\n      });\n      for (let i = 0; i < sectorsData.length; i++) {\n        // 遍历每个雷达图区域\n        const sector = sectors.select('.sector' + (i + 1));\n        const sectorData = sectorsData[i];\n        sector.append('polygon').attr('points', sectorData.polygon).attr('fill', function (d, index) {\n          return that.getColor(i, 0.5);\n        });\n        // .attr('fill', 'none')\n        const circles = sector.append('g').classed('circles', true);\n        circles.selectAll('circles').data(sectorData.points).enter().append('circle').attr('cx', function (d) {\n          return d.x;\n        }).attr('cy', function (d) {\n          return d.y;\n        }).attr('r', 1.5).attr('stroke', function (d, index) {\n          return that.getColor(i, 0.5);\n        });\n      }\n      // 给两条直线中上色可转换成一条线上色，将第二条线内换成别的颜色就可以\n      // 将扇形的多余部分用空白圆覆盖\n      const shadow = main.append('circle');\n      shadow.attr('cx', 0).attr('cy', 0).attr('r', this.chartConfig.sector_radius).attr('fill', 'white');\n      // 同心圆\n      const webs = main.append('g').classed('webs', true);\n      webs.selectAll('circle').data(polygons.radius_circle).enter().append('circle').attr('cx', '0').attr('cy', '0').attr('r', function (d) {\n        return d;\n      });\n      // 画轴\n      const axissData = this.calcAxisData(polygons);\n      const lines = main.append('g').classed('lines', true);\n      lines.selectAll('g').data(axissData).enter().append('g').attr('class', function (d, i) {\n        return 'line' + (i + 1);\n      });\n      for (let i = 0; i < this.chartConfig.total * this.chartConfig.level; i++) {\n        const temp = i % 6;\n        const line = lines.select('.line' + (i + 1));\n        line.append('line').attr('x1', 0).attr('y1', 0).attr('x2', axissData[i].x).attr('y2', axissData[i].y).attr('stroke', function (d, index) {\n          return that.getColor(temp, axissData[i].proportion);\n        });\n      }\n      // 标注公司位置\n      // const copData = this.calcCopData()\n      // 计算点的位置\n      const areasData = this.calcAreaData();\n      // 添加g分组包含所有雷达图区域\n      const areas = main.append('g').classed('areas', true);\n      // 添加g分组包含雷达图区域下的多边形和圆点\n      areas.selectAll('g').data(areasData).enter().append('g').attr('class', function (d, i) {\n        return 'area' + (i + 1);\n      });\n      for (let i = 0; i < areasData.length; i++) {\n        // 遍历每个雷达图区域\n        const area = areas.select('.area' + (i + 1));\n        const areaData = areasData[i];\n        area.append('polygon').attr('points', areaData.polygon).attr('stroke', function (d, index) {\n          return that.getColorCoop(i);\n        }).attr('fill', 'none');\n        // 绘制雷达图定点\n        const circles = area.append('g').classed('circles', true);\n        circles.selectAll('circles').data(areaData.points).enter().append('circle').attr('cx', function (d) {\n          return d.x;\n        }).attr('cy', function (d) {\n          return d.y;\n        }).attr('r', 3).attr('stroke', function (d, index) {\n          return that.getColorCoop(i);\n        });\n      }\n      // 计算文字坐标\n      const textPoints = [];\n      // 文字坐标位置\n      const textRadius = this.chartConfig.radius + 30;\n      for (let i = 0; i < this.chartConfig.total; i++) {\n        const x = textRadius * Math.sin(i * onePiece);\n        const y = textRadius * Math.cos(i * onePiece);\n        textPoints.push({\n          x: x,\n          y: y\n        });\n      }\n      // 添加到画布\n      const texts = main.append('g').classed('texts', true);\n      texts.selectAll('text').data(textPoints).enter().append('text').attr('x', function (d) {\n        return d.x;\n      }).attr('y', function (d) {\n        return d.y;\n      }).text(function (d, i) {\n        return that.chartData.fieldNames[idx][i];\n      });\n    },\n    // 计算轴上公司位置\n    calcCopData() {\n      const CopData = [];\n      const onePiece = this.chartConfig.arc / this.chartConfig.total;\n      const values = this.chartData.values_num;\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        for (let j = 0; j < value.length; j++) {\n          const r = value[j] / 5 * this.chartConfig.radius;\n          const x = r * Math.sin(i * onePiece);\n          const y = r * Math.cos(i * onePiece);\n          CopData.push({\n            x: x,\n            y: y,\n            r: r\n          });\n        }\n      }\n      return CopData;\n    },\n    calcAxisData(polygons) {\n      const axisData = [];\n      for (let i = 0; i < polygons.webPoints.length; i++) {\n        for (let j = 0; j < polygons.webPoints[i].length; j++) {\n          const temp = this.findMax(this.chartData.values_coop_num[j]);\n          axisData.push({\n            x: polygons.webPoints[i][j].x,\n            y: polygons.webPoints[i][j].y,\n            proportion: this.chartData.values_coop_num[j][i] / temp\n          });\n        }\n      }\n      return axisData;\n    },\n    calcAreaData() {\n      const areasData = [];\n      const onePiece = this.chartConfig.arc / this.chartConfig.total;\n      const values = this.chartData.values;\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        let area = '';\n        const points = [];\n        for (let k = 0; k < this.chartConfig.total; k++) {\n          const r = this.chartConfig.radius * (value[k] - this.chartConfig.rangeMin) / (this.chartConfig.rangeMax - this.chartConfig.rangeMin);\n          const x = r * Math.sin(k * onePiece);\n          const y = r * Math.cos(k * onePiece);\n          area += x + ',' + y + ' ';\n          points.push({\n            x: x,\n            y: y\n          });\n        }\n        areasData.push({\n          // 用于画连线的定义\n          polygon: area,\n          // 用于计算单个点的定义\n          points: points\n        });\n      }\n      return areasData;\n    },\n    calcSectorData() {\n      const sectorData = [];\n      const onePiece = this.chartConfig.arc / 30;\n      const values = this.chartData.values_coop_num;\n      // 分6次画扇形\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        let sector = '';\n        const points = [];\n        // 每个扇形中有5个点\n        const temp = this.findMax(value);\n        for (let j = 0; j < value.length; j++) {\n          const r = this.chartConfig.sector_radius + value[j] / temp * this.chartConfig.sector_height;\n          const x = r * Math.sin((i * 5 + j) * onePiece);\n          const y = r * Math.cos((i * 5 + j) * onePiece);\n          sector += x + ',' + y + ' ';\n          points.push({\n            x: x,\n            y: y\n          });\n          if (j === value.length - 1) {\n            sector += 0 + ',' + 0 + ' ';\n          }\n        }\n        sectorData.push({\n          polygon: sector,\n          points: points\n        });\n      }\n      return sectorData;\n    },\n    findMax(array) {\n      let temp = 0;\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] > temp) {\n          temp = array[i];\n        }\n      }\n      return temp;\n    }\n  },\n  mounted() {\n    this.createRadarChart(200, 150, 0);\n    this.createRadarChart(200, 450, 1);\n    this.createRadarChart(200, 750, 2);\n  }\n};","map":{"version":3,"names":["radarAxisJson","radarJson","bordJson","d3","name","data","chartData","fieldNames","values","values_compare","values_coop_num","values_num","chartConfig","radius","sector_radius","sector_height","total","level","rangeMin","rangeMax","arc","Math","PI","methods","getColorCoop","idx","palette","length","getColor","proportion","i","interpolateLab","createRadarChart","width","height","that","main","select","append","classed","attr","onePiece","polygons","webs","webPoints","radius_circle","k","r","push","x","sin","y","cos","temp","findMax","sectorsData","calcSectorData","sectors","selectAll","enter","d","sector","sectorData","polygon","index","circles","points","shadow","axissData","calcAxisData","lines","line","areasData","calcAreaData","areas","area","areaData","textPoints","textRadius","texts","text","calcCopData","CopData","value","j","axisData","array","mounted"],"sources":["/Users/younggaming/Documents/webstorm/ybcprogram/src/components/view2.vue"],"sourcesContent":["<template>\n  <div class=\"container\" id=\"view3\">\n    <svg width=\"100%\" height=\"100%\"></svg>\n  </div>\n\n</template>\n\n<script>\nimport radarAxisJson from '../../../../pyCharm/ybcProject/data/radar_axis.json'\nimport radarJson from '../../../../pyCharm/ybcProject/data/radar_detail.json'\nimport bordJson from '../../../../pyCharm/ybcProject/data/bord.json'\nimport * as d3 from 'd3'\nexport default {\n  name: 'view_2',\n  data () {\n    return {\n      chartData: {\n        fieldNames: [\n          ['流动比率', '速动比率', '现金比率', '资产负债率', '所有者权益比率', '产权比率'],\n          ['流动资产周转率', '流动资产利润率', '固定资产周转率', '固定资产利润率', '总资产周转率', '总资产利润率'],\n          ['营业毛利率', '净利润率', '营业利润率', '成本费用利润率', '总资产报酬率', '总负债报酬率']\n        ],\n        values: [\n          [10, 20, 30, 40, 50, 60],\n          [90, 80, 70, 60, 50, 40]\n        ],\n        values_compare: [\n          [10, 20, 30, 40, 50, 60],\n          [90, 80, 70, 60, 50, 40]\n        ],\n        values_coop_num: [\n          [1, 1, 0, 1, 0],\n          [1, 2, 3, 4, 5],\n          [30, 2, 3, 4, 5],\n          [1, 2, 3, 4, 5],\n          [1, 2, 30, 4, 5],\n          [1, 2, 3, 4, 5]\n        ],\n        values_num: [\n          [0.75, 0.2],\n          [1.2, 3.4],\n          [1.3, 2.4],\n          [3.5, 1.5],\n          [4, 3.4],\n          [1.3, 1.4]\n        ]\n      },\n      chartConfig: {\n        // 调整雷达图的大小\n        radius: 105,\n        // 雷达图外扇形半径\n        sector_radius: 120,\n        // 雷达图外扇形高度\n        sector_height: 30,\n        // 指标的数量，和fieldNames的长度相同\n        total: 6,\n        // 网轴的级数，网轴上从小到大有多少个正方形\n        level: 5,\n        rangeMin: 0,\n        rangeMax: 100,\n        arc: 2 * Math.PI\n      }\n    }\n  },\n  methods: {\n    // 计算轴颜色和扇形颜色盘\n    // 公司和对比公司的颜色盘\n    getColorCoop (idx) {\n      const palette = ['#f5994e', '#7eb00a']\n      return palette[idx % palette.length]\n    },\n    getColor (idx, proportion) {\n      const palette = [ // 从上到下：绿黄蓝紫灰红\n        ['#2ca25f', '#99d8c9'],\n        ['#fdae6b', '#ffeda0'],\n        ['#3182bd', '#9ecae1'],\n        ['#756bb1', '#bcbddc'],\n        ['#636363', '#bdbdbd'],\n        ['#f03b20', '#feb24c']\n      ]\n      const i = d3.interpolateLab(palette[idx][0], palette[idx][1])\n      return i(proportion)\n    },\n    createRadarChart (width, height, idx) {\n      // 给data里的值赋值\n      // this.chartData.values_main[0][0] = 100\n      const that = this\n      const main = d3.select('#view3 svg')\n        .append('g')\n        .classed('main', true)\n        // 可以这么写数据，圆中心位置\n        .attr('transform', 'translate(' + width + ',' + height + ')')\n      const onePiece = this.chartConfig.arc / this.chartConfig.total\n      // 每个点坐标\n      const polygons = {\n        webs: [],\n        webPoints: [],\n        // 同心圆半径\n        radius_circle: []\n      }\n      // 计算每一层坐标\n      for (let k = this.chartConfig.level; k > 0; k--) {\n        let webs = ''\n        const webPoints = []\n        const r = this.chartConfig.radius / this.chartConfig.level * k\n        polygons.radius_circle.push(r)\n        // 计算一层中每个点的坐标\n        for (let i = 0; i < this.chartConfig.total; i++) {\n          const x = r * Math.sin(i * onePiece)\n          const y = r * Math.cos(i * onePiece)\n          const temp = this.findMax(this.chartData.values_coop_num[i])\n          webs += x + ',' + y + ' '\n          webPoints.push({\n            x: x,\n            y: y,\n            proportion: this.chartData.values_coop_num[i][k] / temp\n          })\n        }\n        polygons.webs.push(webs)\n        polygons.webPoints.push(webPoints)\n      }\n      // 画圆外侧扇形区域\n      const sectorsData = this.calcSectorData()\n      const sectors = main.append('g')\n        .classed('sectors', true)\n      sectors.selectAll('g')\n        .data(sectorsData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'sector' + (i + 1)\n        })\n      for (let i = 0; i < sectorsData.length; i++) {\n        // 遍历每个雷达图区域\n        const sector = sectors.select('.sector' + (i + 1))\n        const sectorData = sectorsData[i]\n        sector.append('polygon')\n          .attr('points', sectorData.polygon)\n          .attr('fill', function (d, index) {\n            return that.getColor(i, 0.5)\n          })\n        // .attr('fill', 'none')\n        const circles = sector.append('g')\n          .classed('circles', true)\n        circles.selectAll('circles')\n          .data(sectorData.points)\n          .enter()\n          .append('circle')\n          .attr('cx', function (d) {\n            return d.x\n          })\n          .attr('cy', function (d) {\n            return d.y\n          })\n          .attr('r', 1.5)\n          .attr('stroke', function (d, index) {\n            return that.getColor(i, 0.5)\n          })\n      }\n      // 给两条直线中上色可转换成一条线上色，将第二条线内换成别的颜色就可以\n      // 将扇形的多余部分用空白圆覆盖\n      const shadow = main.append('circle')\n      shadow.attr('cx', 0)\n        .attr('cy', 0)\n        .attr('r', this.chartConfig.sector_radius)\n        .attr('fill', 'white')\n      // 同心圆\n      const webs = main.append('g')\n        .classed('webs', true)\n      webs.selectAll('circle')\n        .data(polygons.radius_circle)\n        .enter()\n        .append('circle')\n        .attr('cx', '0')\n        .attr('cy', '0')\n        .attr('r', function (d) {\n          return d\n        })\n      // 画轴\n      const axissData = this.calcAxisData(polygons)\n      const lines = main.append('g')\n        .classed('lines', true)\n      lines.selectAll('g')\n        .data(axissData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'line' + (i + 1)\n        })\n      for (let i = 0; i < this.chartConfig.total * this.chartConfig.level; i++) {\n        const temp = i % 6\n        const line = lines.select('.line' + (i + 1))\n        line.append('line')\n          .attr('x1', 0)\n          .attr('y1', 0)\n          .attr('x2', axissData[i].x)\n          .attr('y2', axissData[i].y)\n          .attr('stroke', function (d, index) {\n            return that.getColor(temp, axissData[i].proportion)\n          })\n      }\n      // 标注公司位置\n      // const copData = this.calcCopData()\n      // 计算点的位置\n      const areasData = this.calcAreaData()\n      // 添加g分组包含所有雷达图区域\n      const areas = main.append('g')\n        .classed('areas', true)\n      // 添加g分组包含雷达图区域下的多边形和圆点\n      areas.selectAll('g')\n        .data(areasData)\n        .enter()\n        .append('g')\n        .attr('class', function (d, i) {\n          return 'area' + (i + 1)\n        })\n      for (let i = 0; i < areasData.length; i++) {\n        // 遍历每个雷达图区域\n        const area = areas.select('.area' + (i + 1))\n        const areaData = areasData[i]\n        area.append('polygon')\n          .attr('points', areaData.polygon)\n          .attr('stroke', function (d, index) {\n            return that.getColorCoop(i)\n          })\n          .attr('fill', 'none')\n        // 绘制雷达图定点\n        const circles = area.append('g')\n          .classed('circles', true)\n        circles.selectAll('circles')\n          .data(areaData.points)\n          .enter()\n          .append('circle')\n          .attr('cx', function (d) {\n            return d.x\n          })\n          .attr('cy', function (d) {\n            return d.y\n          })\n          .attr('r', 3)\n          .attr('stroke', function (d, index) {\n            return that.getColorCoop(i)\n          })\n      }\n      // 计算文字坐标\n      const textPoints = []\n      // 文字坐标位置\n      const textRadius = this.chartConfig.radius + 30\n      for (let i = 0; i < this.chartConfig.total; i++) {\n        const x = textRadius * Math.sin(i * onePiece)\n        const y = textRadius * Math.cos(i * onePiece)\n        textPoints.push({\n          x: x,\n          y: y\n        })\n      }\n      // 添加到画布\n      const texts = main.append('g')\n        .classed('texts', true)\n      texts.selectAll('text')\n        .data(textPoints)\n        .enter()\n        .append('text')\n        .attr('x', function (d) {\n          return d.x\n        })\n        .attr('y', function (d) {\n          return d.y\n        })\n        .text(function (d, i) {\n          return that.chartData.fieldNames[idx][i]\n        })\n    },\n    // 计算轴上公司位置\n    calcCopData () {\n      const CopData = []\n      const onePiece = this.chartConfig.arc / this.chartConfig.total\n      const values = this.chartData.values_num\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        for (let j = 0; j < value.length; j++) {\n          const r = value[j] / 5 * this.chartConfig.radius\n          const x = r * Math.sin(i * onePiece)\n          const y = r * Math.cos(i * onePiece)\n          CopData.push({\n            x: x,\n            y: y,\n            r: r\n          })\n        }\n      }\n      return CopData\n    },\n    calcAxisData (polygons) {\n      const axisData = []\n      for (let i = 0; i < polygons.webPoints.length; i++) {\n        for (let j = 0; j < polygons.webPoints[i].length; j++) {\n          const temp = this.findMax(this.chartData.values_coop_num[j])\n          axisData.push({\n            x: polygons.webPoints[i][j].x,\n            y: polygons.webPoints[i][j].y,\n            proportion: this.chartData.values_coop_num[j][i] / temp\n          })\n        }\n      }\n      return axisData\n    },\n    calcAreaData () {\n      const areasData = []\n      const onePiece = this.chartConfig.arc / this.chartConfig.total\n      const values = this.chartData.values\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        let area = ''\n        const points = []\n        for (let k = 0; k < this.chartConfig.total; k++) {\n          const r = this.chartConfig.radius * (value[k] - this.chartConfig.rangeMin) / (this.chartConfig.rangeMax - this.chartConfig.rangeMin)\n          const x = r * Math.sin(k * onePiece)\n          const y = r * Math.cos(k * onePiece)\n          area += x + ',' + y + ' '\n          points.push({\n            x: x,\n            y: y\n          })\n        }\n        areasData.push({\n          // 用于画连线的定义\n          polygon: area,\n          // 用于计算单个点的定义\n          points: points\n        })\n      }\n      return areasData\n    },\n    calcSectorData () {\n      const sectorData = []\n      const onePiece = this.chartConfig.arc / 30\n      const values = this.chartData.values_coop_num\n      // 分6次画扇形\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        let sector = ''\n        const points = []\n        // 每个扇形中有5个点\n        const temp = this.findMax(value)\n        for (let j = 0; j < value.length; j++) {\n          const r = this.chartConfig.sector_radius + value[j] / temp * this.chartConfig.sector_height\n          const x = r * Math.sin((i * 5 + j) * onePiece)\n          const y = r * Math.cos((i * 5 + j) * onePiece)\n          sector += x + ',' + y + ' '\n          points.push({\n            x: x,\n            y: y\n          })\n          if (j === value.length - 1) {\n            sector += 0 + ',' + 0 + ' '\n          }\n        }\n        sectorData.push({\n          polygon: sector,\n          points: points\n        })\n      }\n      return sectorData\n    },\n    findMax (array) {\n      let temp = 0\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] > temp) {\n          temp = array[i]\n        }\n      }\n      return temp\n    }\n  },\n  mounted () {\n    this.createRadarChart(200, 150, 0)\n    this.createRadarChart(200, 450, 1)\n    this.createRadarChart(200, 750, 2)\n  }\n}\n</script>\n\n<style>\n\n.container {\n  margin: 30px auto;\n  width: 1200px;\n  height: 300px;\n  /*border: 1px solid #000;*/\n}\n\n.webs circle {\n  fill: white;\n  fill-opacity: 0.5;\n  stroke: gray;\n  stroke-dasharray: 10, 5;\n}\n\n.lines line {\n  fill: white;\n  fill-opacity: 0.5;\n  /*stroke: red;*/\n  stroke-dasharray: 10, 5;\n}\n\n.areas polygon {\n  fill-opacity: 0.5;\n  stroke-width: 3;\n}\n\n.areas circle {\n  fill: white;\n  stroke-width: 3;\n}\n\n.sectors polygon {\n  fill-opacity: 0.5;\n  stroke-width: 3;\n}\n\n.sectors circle {\n  fill: white;\n  stroke-width: 1;\n}\n\n.texts text {\n  font-size: 10px;\n  text-anchor: middle;\n}\n\n.webs circle:nth-child(odd) {\n  fill: lightgray;\n}\n\n</style>\n"],"mappings":";AAQA,OAAOA,aAAY,MAAO,qDAAoD;AAC9E,OAAOC,SAAQ,MAAO,uDAAsD;AAC5E,OAAOC,QAAO,MAAO,+CAA8C;AACnE,OAAO,KAAKC,EAAC,MAAO,IAAG;AACvB,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,SAAS,EAAE;QACTC,UAAU,EAAE,CACV,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,EACpD,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAChE,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EACzD;QACDC,MAAM,EAAE,CACN,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACxB;QACDC,cAAc,EAAE,CACd,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACxB;QACDC,eAAe,EAAE,CACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACf,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACf,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACf;QACDC,UAAU,EAAE,CACV,CAAC,IAAI,EAAE,GAAG,CAAC,EACX,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,CAAC,EAAE,GAAG,CAAC,EACR,CAAC,GAAG,EAAE,GAAG;MAEb,CAAC;MACDC,WAAW,EAAE;QACX;QACAC,MAAM,EAAE,GAAG;QACX;QACAC,aAAa,EAAE,GAAG;QAClB;QACAC,aAAa,EAAE,EAAE;QACjB;QACAC,KAAK,EAAE,CAAC;QACR;QACAC,KAAK,EAAE,CAAC;QACRC,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE,GAAG;QACbC,GAAG,EAAE,IAAIC,IAAI,CAACC;MAChB;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACA;IACAC,YAAWA,CAAGC,GAAG,EAAE;MACjB,MAAMC,OAAM,GAAI,CAAC,SAAS,EAAE,SAAS;MACrC,OAAOA,OAAO,CAACD,GAAE,GAAIC,OAAO,CAACC,MAAM;IACrC,CAAC;IACDC,QAAOA,CAAGH,GAAG,EAAEI,UAAU,EAAE;MACzB,MAAMH,OAAM,GAAI;MAAE;MAChB,CAAC,SAAS,EAAE,SAAS,CAAC,EACtB,CAAC,SAAS,EAAE,SAAS,CAAC,EACtB,CAAC,SAAS,EAAE,SAAS,CAAC,EACtB,CAAC,SAAS,EAAE,SAAS,CAAC,EACtB,CAAC,SAAS,EAAE,SAAS,CAAC,EACtB,CAAC,SAAS,EAAE,SAAS,EACvB;MACA,MAAMI,CAAA,GAAI3B,EAAE,CAAC4B,cAAc,CAACL,OAAO,CAACD,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEC,OAAO,CAACD,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5D,OAAOK,CAAC,CAACD,UAAU;IACrB,CAAC;IACDG,gBAAeA,CAAGC,KAAK,EAAEC,MAAM,EAAET,GAAG,EAAE;MACpC;MACA;MACA,MAAMU,IAAG,GAAI,IAAG;MAChB,MAAMC,IAAG,GAAIjC,EAAE,CAACkC,MAAM,CAAC,YAAY,EAChCC,MAAM,CAAC,GAAG,EACVC,OAAO,CAAC,MAAM,EAAE,IAAI;MACrB;MAAA,CACCC,IAAI,CAAC,WAAW,EAAE,YAAW,GAAIP,KAAI,GAAI,GAAE,GAAIC,MAAK,GAAI,GAAG;MAC9D,MAAMO,QAAO,GAAI,IAAI,CAAC7B,WAAW,CAACQ,GAAE,GAAI,IAAI,CAACR,WAAW,CAACI,KAAI;MAC7D;MACA,MAAM0B,QAAO,GAAI;QACfC,IAAI,EAAE,EAAE;QACRC,SAAS,EAAE,EAAE;QACb;QACAC,aAAa,EAAE;MACjB;MACA;MACA,KAAK,IAAIC,CAAA,GAAI,IAAI,CAAClC,WAAW,CAACK,KAAK,EAAE6B,CAAA,GAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC/C,IAAIH,IAAG,GAAI,EAAC;QACZ,MAAMC,SAAQ,GAAI,EAAC;QACnB,MAAMG,CAAA,GAAI,IAAI,CAACnC,WAAW,CAACC,MAAK,GAAI,IAAI,CAACD,WAAW,CAACK,KAAI,GAAI6B,CAAA;QAC7DJ,QAAQ,CAACG,aAAa,CAACG,IAAI,CAACD,CAAC;QAC7B;QACA,KAAK,IAAIjB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,IAAI,CAAClB,WAAW,CAACI,KAAK,EAAEc,CAAC,EAAE,EAAE;UAC/C,MAAMmB,CAAA,GAAIF,CAAA,GAAI1B,IAAI,CAAC6B,GAAG,CAACpB,CAAA,GAAIW,QAAQ;UACnC,MAAMU,CAAA,GAAIJ,CAAA,GAAI1B,IAAI,CAAC+B,GAAG,CAACtB,CAAA,GAAIW,QAAQ;UACnC,MAAMY,IAAG,GAAI,IAAI,CAACC,OAAO,CAAC,IAAI,CAAChD,SAAS,CAACI,eAAe,CAACoB,CAAC,CAAC;UAC3Da,IAAG,IAAKM,CAAA,GAAI,GAAE,GAAIE,CAAA,GAAI,GAAE;UACxBP,SAAS,CAACI,IAAI,CAAC;YACbC,CAAC,EAAEA,CAAC;YACJE,CAAC,EAAEA,CAAC;YACJtB,UAAU,EAAE,IAAI,CAACvB,SAAS,CAACI,eAAe,CAACoB,CAAC,CAAC,CAACgB,CAAC,IAAIO;UACrD,CAAC;QACH;QACAX,QAAQ,CAACC,IAAI,CAACK,IAAI,CAACL,IAAI;QACvBD,QAAQ,CAACE,SAAS,CAACI,IAAI,CAACJ,SAAS;MACnC;MACA;MACA,MAAMW,WAAU,GAAI,IAAI,CAACC,cAAc,EAAC;MACxC,MAAMC,OAAM,GAAIrB,IAAI,CAACE,MAAM,CAAC,GAAG,EAC5BC,OAAO,CAAC,SAAS,EAAE,IAAI;MAC1BkB,OAAO,CAACC,SAAS,CAAC,GAAG,EAClBrD,IAAI,CAACkD,WAAW,EAChBI,KAAK,EAAC,CACNrB,MAAM,CAAC,GAAG,EACVE,IAAI,CAAC,OAAO,EAAE,UAAUoB,CAAC,EAAE9B,CAAC,EAAE;QAC7B,OAAO,QAAO,IAAKA,CAAA,GAAI,CAAC;MAC1B,CAAC;MACH,KAAK,IAAIA,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIyB,WAAW,CAAC5B,MAAM,EAAEG,CAAC,EAAE,EAAE;QAC3C;QACA,MAAM+B,MAAK,GAAIJ,OAAO,CAACpB,MAAM,CAAC,SAAQ,IAAKP,CAAA,GAAI,CAAC,CAAC;QACjD,MAAMgC,UAAS,GAAIP,WAAW,CAACzB,CAAC;QAChC+B,MAAM,CAACvB,MAAM,CAAC,SAAS,EACpBE,IAAI,CAAC,QAAQ,EAAEsB,UAAU,CAACC,OAAO,EACjCvB,IAAI,CAAC,MAAM,EAAE,UAAUoB,CAAC,EAAEI,KAAK,EAAE;UAChC,OAAO7B,IAAI,CAACP,QAAQ,CAACE,CAAC,EAAE,GAAG;QAC7B,CAAC;QACH;QACA,MAAMmC,OAAM,GAAIJ,MAAM,CAACvB,MAAM,CAAC,GAAG,EAC9BC,OAAO,CAAC,SAAS,EAAE,IAAI;QAC1B0B,OAAO,CAACP,SAAS,CAAC,SAAS,EACxBrD,IAAI,CAACyD,UAAU,CAACI,MAAM,EACtBP,KAAK,EAAC,CACNrB,MAAM,CAAC,QAAQ,EACfE,IAAI,CAAC,IAAI,EAAE,UAAUoB,CAAC,EAAE;UACvB,OAAOA,CAAC,CAACX,CAAA;QACX,CAAC,EACAT,IAAI,CAAC,IAAI,EAAE,UAAUoB,CAAC,EAAE;UACvB,OAAOA,CAAC,CAACT,CAAA;QACX,CAAC,EACAX,IAAI,CAAC,GAAG,EAAE,GAAG,EACbA,IAAI,CAAC,QAAQ,EAAE,UAAUoB,CAAC,EAAEI,KAAK,EAAE;UAClC,OAAO7B,IAAI,CAACP,QAAQ,CAACE,CAAC,EAAE,GAAG;QAC7B,CAAC;MACL;MACA;MACA;MACA,MAAMqC,MAAK,GAAI/B,IAAI,CAACE,MAAM,CAAC,QAAQ;MACnC6B,MAAM,CAAC3B,IAAI,CAAC,IAAI,EAAE,CAAC,EAChBA,IAAI,CAAC,IAAI,EAAE,CAAC,EACZA,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC5B,WAAW,CAACE,aAAa,EACxC0B,IAAI,CAAC,MAAM,EAAE,OAAO;MACvB;MACA,MAAMG,IAAG,GAAIP,IAAI,CAACE,MAAM,CAAC,GAAG,EACzBC,OAAO,CAAC,MAAM,EAAE,IAAI;MACvBI,IAAI,CAACe,SAAS,CAAC,QAAQ,EACpBrD,IAAI,CAACqC,QAAQ,CAACG,aAAa,EAC3Bc,KAAK,EAAC,CACNrB,MAAM,CAAC,QAAQ,EACfE,IAAI,CAAC,IAAI,EAAE,GAAG,EACdA,IAAI,CAAC,IAAI,EAAE,GAAG,EACdA,IAAI,CAAC,GAAG,EAAE,UAAUoB,CAAC,EAAE;QACtB,OAAOA,CAAA;MACT,CAAC;MACH;MACA,MAAMQ,SAAQ,GAAI,IAAI,CAACC,YAAY,CAAC3B,QAAQ;MAC5C,MAAM4B,KAAI,GAAIlC,IAAI,CAACE,MAAM,CAAC,GAAG,EAC1BC,OAAO,CAAC,OAAO,EAAE,IAAI;MACxB+B,KAAK,CAACZ,SAAS,CAAC,GAAG,EAChBrD,IAAI,CAAC+D,SAAS,EACdT,KAAK,EAAC,CACNrB,MAAM,CAAC,GAAG,EACVE,IAAI,CAAC,OAAO,EAAE,UAAUoB,CAAC,EAAE9B,CAAC,EAAE;QAC7B,OAAO,MAAK,IAAKA,CAAA,GAAI,CAAC;MACxB,CAAC;MACH,KAAK,IAAIA,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,IAAI,CAAClB,WAAW,CAACI,KAAI,GAAI,IAAI,CAACJ,WAAW,CAACK,KAAK,EAAEa,CAAC,EAAE,EAAE;QACxE,MAAMuB,IAAG,GAAIvB,CAAA,GAAI;QACjB,MAAMyC,IAAG,GAAID,KAAK,CAACjC,MAAM,CAAC,OAAM,IAAKP,CAAA,GAAI,CAAC,CAAC;QAC3CyC,IAAI,CAACjC,MAAM,CAAC,MAAM,EACfE,IAAI,CAAC,IAAI,EAAE,CAAC,EACZA,IAAI,CAAC,IAAI,EAAE,CAAC,EACZA,IAAI,CAAC,IAAI,EAAE4B,SAAS,CAACtC,CAAC,CAAC,CAACmB,CAAC,EACzBT,IAAI,CAAC,IAAI,EAAE4B,SAAS,CAACtC,CAAC,CAAC,CAACqB,CAAC,EACzBX,IAAI,CAAC,QAAQ,EAAE,UAAUoB,CAAC,EAAEI,KAAK,EAAE;UAClC,OAAO7B,IAAI,CAACP,QAAQ,CAACyB,IAAI,EAAEe,SAAS,CAACtC,CAAC,CAAC,CAACD,UAAU;QACpD,CAAC;MACL;MACA;MACA;MACA;MACA,MAAM2C,SAAQ,GAAI,IAAI,CAACC,YAAY,EAAC;MACpC;MACA,MAAMC,KAAI,GAAItC,IAAI,CAACE,MAAM,CAAC,GAAG,EAC1BC,OAAO,CAAC,OAAO,EAAE,IAAI;MACxB;MACAmC,KAAK,CAAChB,SAAS,CAAC,GAAG,EAChBrD,IAAI,CAACmE,SAAS,EACdb,KAAK,EAAC,CACNrB,MAAM,CAAC,GAAG,EACVE,IAAI,CAAC,OAAO,EAAE,UAAUoB,CAAC,EAAE9B,CAAC,EAAE;QAC7B,OAAO,MAAK,IAAKA,CAAA,GAAI,CAAC;MACxB,CAAC;MACH,KAAK,IAAIA,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI0C,SAAS,CAAC7C,MAAM,EAAEG,CAAC,EAAE,EAAE;QACzC;QACA,MAAM6C,IAAG,GAAID,KAAK,CAACrC,MAAM,CAAC,OAAM,IAAKP,CAAA,GAAI,CAAC,CAAC;QAC3C,MAAM8C,QAAO,GAAIJ,SAAS,CAAC1C,CAAC;QAC5B6C,IAAI,CAACrC,MAAM,CAAC,SAAS,EAClBE,IAAI,CAAC,QAAQ,EAAEoC,QAAQ,CAACb,OAAO,EAC/BvB,IAAI,CAAC,QAAQ,EAAE,UAAUoB,CAAC,EAAEI,KAAK,EAAE;UAClC,OAAO7B,IAAI,CAACX,YAAY,CAACM,CAAC;QAC5B,CAAC,EACAU,IAAI,CAAC,MAAM,EAAE,MAAM;QACtB;QACA,MAAMyB,OAAM,GAAIU,IAAI,CAACrC,MAAM,CAAC,GAAG,EAC5BC,OAAO,CAAC,SAAS,EAAE,IAAI;QAC1B0B,OAAO,CAACP,SAAS,CAAC,SAAS,EACxBrD,IAAI,CAACuE,QAAQ,CAACV,MAAM,EACpBP,KAAK,EAAC,CACNrB,MAAM,CAAC,QAAQ,EACfE,IAAI,CAAC,IAAI,EAAE,UAAUoB,CAAC,EAAE;UACvB,OAAOA,CAAC,CAACX,CAAA;QACX,CAAC,EACAT,IAAI,CAAC,IAAI,EAAE,UAAUoB,CAAC,EAAE;UACvB,OAAOA,CAAC,CAACT,CAAA;QACX,CAAC,EACAX,IAAI,CAAC,GAAG,EAAE,CAAC,EACXA,IAAI,CAAC,QAAQ,EAAE,UAAUoB,CAAC,EAAEI,KAAK,EAAE;UAClC,OAAO7B,IAAI,CAACX,YAAY,CAACM,CAAC;QAC5B,CAAC;MACL;MACA;MACA,MAAM+C,UAAS,GAAI,EAAC;MACpB;MACA,MAAMC,UAAS,GAAI,IAAI,CAAClE,WAAW,CAACC,MAAK,GAAI,EAAC;MAC9C,KAAK,IAAIiB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,IAAI,CAAClB,WAAW,CAACI,KAAK,EAAEc,CAAC,EAAE,EAAE;QAC/C,MAAMmB,CAAA,GAAI6B,UAAS,GAAIzD,IAAI,CAAC6B,GAAG,CAACpB,CAAA,GAAIW,QAAQ;QAC5C,MAAMU,CAAA,GAAI2B,UAAS,GAAIzD,IAAI,CAAC+B,GAAG,CAACtB,CAAA,GAAIW,QAAQ;QAC5CoC,UAAU,CAAC7B,IAAI,CAAC;UACdC,CAAC,EAAEA,CAAC;UACJE,CAAC,EAAEA;QACL,CAAC;MACH;MACA;MACA,MAAM4B,KAAI,GAAI3C,IAAI,CAACE,MAAM,CAAC,GAAG,EAC1BC,OAAO,CAAC,OAAO,EAAE,IAAI;MACxBwC,KAAK,CAACrB,SAAS,CAAC,MAAM,EACnBrD,IAAI,CAACwE,UAAU,EACflB,KAAK,EAAC,CACNrB,MAAM,CAAC,MAAM,EACbE,IAAI,CAAC,GAAG,EAAE,UAAUoB,CAAC,EAAE;QACtB,OAAOA,CAAC,CAACX,CAAA;MACX,CAAC,EACAT,IAAI,CAAC,GAAG,EAAE,UAAUoB,CAAC,EAAE;QACtB,OAAOA,CAAC,CAACT,CAAA;MACX,CAAC,EACA6B,IAAI,CAAC,UAAUpB,CAAC,EAAE9B,CAAC,EAAE;QACpB,OAAOK,IAAI,CAAC7B,SAAS,CAACC,UAAU,CAACkB,GAAG,CAAC,CAACK,CAAC;MACzC,CAAC;IACL,CAAC;IACD;IACAmD,WAAUA,CAAA,EAAK;MACb,MAAMC,OAAM,GAAI,EAAC;MACjB,MAAMzC,QAAO,GAAI,IAAI,CAAC7B,WAAW,CAACQ,GAAE,GAAI,IAAI,CAACR,WAAW,CAACI,KAAI;MAC7D,MAAMR,MAAK,GAAI,IAAI,CAACF,SAAS,CAACK,UAAS;MACvC,KAAK,IAAImB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAItB,MAAM,CAACmB,MAAM,EAAEG,CAAC,EAAE,EAAE;QACtC,MAAMqD,KAAI,GAAI3E,MAAM,CAACsB,CAAC;QACtB,KAAK,IAAIsD,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAID,KAAK,CAACxD,MAAM,EAAEyD,CAAC,EAAE,EAAE;UACrC,MAAMrC,CAAA,GAAIoC,KAAK,CAACC,CAAC,IAAI,IAAI,IAAI,CAACxE,WAAW,CAACC,MAAK;UAC/C,MAAMoC,CAAA,GAAIF,CAAA,GAAI1B,IAAI,CAAC6B,GAAG,CAACpB,CAAA,GAAIW,QAAQ;UACnC,MAAMU,CAAA,GAAIJ,CAAA,GAAI1B,IAAI,CAAC+B,GAAG,CAACtB,CAAA,GAAIW,QAAQ;UACnCyC,OAAO,CAAClC,IAAI,CAAC;YACXC,CAAC,EAAEA,CAAC;YACJE,CAAC,EAAEA,CAAC;YACJJ,CAAC,EAAEA;UACL,CAAC;QACH;MACF;MACA,OAAOmC,OAAM;IACf,CAAC;IACDb,YAAWA,CAAG3B,QAAQ,EAAE;MACtB,MAAM2C,QAAO,GAAI,EAAC;MAClB,KAAK,IAAIvD,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIY,QAAQ,CAACE,SAAS,CAACjB,MAAM,EAAEG,CAAC,EAAE,EAAE;QAClD,KAAK,IAAIsD,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI1C,QAAQ,CAACE,SAAS,CAACd,CAAC,CAAC,CAACH,MAAM,EAAEyD,CAAC,EAAE,EAAE;UACrD,MAAM/B,IAAG,GAAI,IAAI,CAACC,OAAO,CAAC,IAAI,CAAChD,SAAS,CAACI,eAAe,CAAC0E,CAAC,CAAC;UAC3DC,QAAQ,CAACrC,IAAI,CAAC;YACZC,CAAC,EAAEP,QAAQ,CAACE,SAAS,CAACd,CAAC,CAAC,CAACsD,CAAC,CAAC,CAACnC,CAAC;YAC7BE,CAAC,EAAET,QAAQ,CAACE,SAAS,CAACd,CAAC,CAAC,CAACsD,CAAC,CAAC,CAACjC,CAAC;YAC7BtB,UAAU,EAAE,IAAI,CAACvB,SAAS,CAACI,eAAe,CAAC0E,CAAC,CAAC,CAACtD,CAAC,IAAIuB;UACrD,CAAC;QACH;MACF;MACA,OAAOgC,QAAO;IAChB,CAAC;IACDZ,YAAWA,CAAA,EAAK;MACd,MAAMD,SAAQ,GAAI,EAAC;MACnB,MAAM/B,QAAO,GAAI,IAAI,CAAC7B,WAAW,CAACQ,GAAE,GAAI,IAAI,CAACR,WAAW,CAACI,KAAI;MAC7D,MAAMR,MAAK,GAAI,IAAI,CAACF,SAAS,CAACE,MAAK;MACnC,KAAK,IAAIsB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAItB,MAAM,CAACmB,MAAM,EAAEG,CAAC,EAAE,EAAE;QACtC,MAAMqD,KAAI,GAAI3E,MAAM,CAACsB,CAAC;QACtB,IAAI6C,IAAG,GAAI,EAAC;QACZ,MAAMT,MAAK,GAAI,EAAC;QAChB,KAAK,IAAIpB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,IAAI,CAAClC,WAAW,CAACI,KAAK,EAAE8B,CAAC,EAAE,EAAE;UAC/C,MAAMC,CAAA,GAAI,IAAI,CAACnC,WAAW,CAACC,MAAK,IAAKsE,KAAK,CAACrC,CAAC,IAAI,IAAI,CAAClC,WAAW,CAACM,QAAQ,KAAK,IAAI,CAACN,WAAW,CAACO,QAAO,GAAI,IAAI,CAACP,WAAW,CAACM,QAAQ;UACnI,MAAM+B,CAAA,GAAIF,CAAA,GAAI1B,IAAI,CAAC6B,GAAG,CAACJ,CAAA,GAAIL,QAAQ;UACnC,MAAMU,CAAA,GAAIJ,CAAA,GAAI1B,IAAI,CAAC+B,GAAG,CAACN,CAAA,GAAIL,QAAQ;UACnCkC,IAAG,IAAK1B,CAAA,GAAI,GAAE,GAAIE,CAAA,GAAI,GAAE;UACxBe,MAAM,CAAClB,IAAI,CAAC;YACVC,CAAC,EAAEA,CAAC;YACJE,CAAC,EAAEA;UACL,CAAC;QACH;QACAqB,SAAS,CAACxB,IAAI,CAAC;UACb;UACAe,OAAO,EAAEY,IAAI;UACb;UACAT,MAAM,EAAEA;QACV,CAAC;MACH;MACA,OAAOM,SAAQ;IACjB,CAAC;IACDhB,cAAaA,CAAA,EAAK;MAChB,MAAMM,UAAS,GAAI,EAAC;MACpB,MAAMrB,QAAO,GAAI,IAAI,CAAC7B,WAAW,CAACQ,GAAE,GAAI,EAAC;MACzC,MAAMZ,MAAK,GAAI,IAAI,CAACF,SAAS,CAACI,eAAc;MAC5C;MACA,KAAK,IAAIoB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAItB,MAAM,CAACmB,MAAM,EAAEG,CAAC,EAAE,EAAE;QACtC,MAAMqD,KAAI,GAAI3E,MAAM,CAACsB,CAAC;QACtB,IAAI+B,MAAK,GAAI,EAAC;QACd,MAAMK,MAAK,GAAI,EAAC;QAChB;QACA,MAAMb,IAAG,GAAI,IAAI,CAACC,OAAO,CAAC6B,KAAK;QAC/B,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAID,KAAK,CAACxD,MAAM,EAAEyD,CAAC,EAAE,EAAE;UACrC,MAAMrC,CAAA,GAAI,IAAI,CAACnC,WAAW,CAACE,aAAY,GAAIqE,KAAK,CAACC,CAAC,IAAI/B,IAAG,GAAI,IAAI,CAACzC,WAAW,CAACG,aAAY;UAC1F,MAAMkC,CAAA,GAAIF,CAAA,GAAI1B,IAAI,CAAC6B,GAAG,CAAC,CAACpB,CAAA,GAAI,IAAIsD,CAAC,IAAI3C,QAAQ;UAC7C,MAAMU,CAAA,GAAIJ,CAAA,GAAI1B,IAAI,CAAC+B,GAAG,CAAC,CAACtB,CAAA,GAAI,IAAIsD,CAAC,IAAI3C,QAAQ;UAC7CoB,MAAK,IAAKZ,CAAA,GAAI,GAAE,GAAIE,CAAA,GAAI,GAAE;UAC1Be,MAAM,CAAClB,IAAI,CAAC;YACVC,CAAC,EAAEA,CAAC;YACJE,CAAC,EAAEA;UACL,CAAC;UACD,IAAIiC,CAAA,KAAMD,KAAK,CAACxD,MAAK,GAAI,CAAC,EAAE;YAC1BkC,MAAK,IAAK,IAAI,GAAE,GAAI,IAAI,GAAE;UAC5B;QACF;QACAC,UAAU,CAACd,IAAI,CAAC;UACde,OAAO,EAAEF,MAAM;UACfK,MAAM,EAAEA;QACV,CAAC;MACH;MACA,OAAOJ,UAAS;IAClB,CAAC;IACDR,OAAMA,CAAGgC,KAAK,EAAE;MACd,IAAIjC,IAAG,GAAI;MACX,KAAK,IAAIvB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIwD,KAAK,CAAC3D,MAAM,EAAEG,CAAC,EAAE,EAAE;QACrC,IAAIwD,KAAK,CAACxD,CAAC,IAAIuB,IAAI,EAAE;UACnBA,IAAG,GAAIiC,KAAK,CAACxD,CAAC;QAChB;MACF;MACA,OAAOuB,IAAG;IACZ;EACF,CAAC;EACDkC,OAAMA,CAAA,EAAK;IACT,IAAI,CAACvD,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;IACjC,IAAI,CAACA,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;IACjC,IAAI,CAACA,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACnC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}